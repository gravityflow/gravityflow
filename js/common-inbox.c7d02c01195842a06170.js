/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgravityflow"] = self["webpackChunkgravityflow"] || []).push([["common-inbox"],{

/***/ "./src/js/common/grids/inbox.js":
/*!***************************************************!*\
  !*** ./src/js/common/grids/inbox.js + 12 modules ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ inbox; },\n  \"getGridId\": function() { return /* binding */ getGridId; },\n  \"getGridOptions\": function() { return /* binding */ getGridOptions; },\n  \"initializeGrid\": function() { return /* binding */ initializeGrid; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(\"./node_modules/@babel/runtime/regenerator/index.js\");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/ag-grid-community/dist/ag-grid-community.cjs.js\nvar ag_grid_community_cjs = __webpack_require__(\"./node_modules/ag-grid-community/dist/ag-grid-community.cjs.js\");\n// EXTERNAL MODULE: ./node_modules/delegate/src/delegate.js\nvar delegate = __webpack_require__(\"./node_modules/delegate/src/delegate.js\");\nvar delegate_default = /*#__PURE__*/__webpack_require__.n(delegate);\n// EXTERNAL MODULE: external \"gflow_config\"\nvar external_gflow_config_ = __webpack_require__(\"gflow-config\");\nvar external_gflow_config_default = /*#__PURE__*/__webpack_require__.n(external_gflow_config_);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n// EXTERNAL MODULE: ./node_modules/lodash/identity.js\nvar identity = __webpack_require__(\"./node_modules/lodash/identity.js\");\nvar identity_default = /*#__PURE__*/__webpack_require__.n(identity);\n// EXTERNAL MODULE: ./node_modules/lodash/pickBy.js\nvar pickBy = __webpack_require__(\"./node_modules/lodash/pickBy.js\");\nvar pickBy_default = /*#__PURE__*/__webpack_require__.n(pickBy);\n// EXTERNAL MODULE: ./node_modules/lodash/template.js\nvar template = __webpack_require__(\"./node_modules/lodash/template.js\");\nvar template_default = /*#__PURE__*/__webpack_require__.n(template);\n;// CONCATENATED MODULE: ./src/js/common/config/request.js\n\n\n\n/**\n * Get your endpoints safely here first with optional chaining\n */\nvar endpoints = (external_gflow_config_default()) === null || (external_gflow_config_default()) === void 0 ? void 0 : (external_gflow_config_default()).endpoints;\n/**\n * Now map them to action names and add templates as needed\n */\n\nvar getPathMap = function getPathMap() {\n  var map = {}; // Add product to a project\n  // example:\n  // request('example', { method: 'POST', restParams: { project_id: int }, json: { space: int, items: [{ post_id: int, configuration: '', quantity: int }] }}).then(data => console.log(data))\n  // Accepted properties in the JSON body are\n  // space (the (optional) ID of the selected space within the project) and\n  // items, an array of example items.\n\n  for (var endpoint in endpoints) {\n    var data = endpoints[endpoint];\n    map[endpoint] = {\n      endpoint: template_default()(\"\".concat(data.path).concat(data.rest_params)),\n      nonce: data.nonce\n    };\n  }\n\n  return map;\n};\n\nvar PATH_MAP = getPathMap();\n// EXTERNAL MODULE: ./node_modules/ramda/es/omit.js\nvar omit = __webpack_require__(\"./node_modules/ramda/es/omit.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/is.js\nvar is = __webpack_require__(\"./node_modules/ramda/es/is.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/isEmpty.js + 3 modules\nvar isEmpty = __webpack_require__(\"./node_modules/ramda/es/isEmpty.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/startsWith.js + 9 modules\nvar startsWith = __webpack_require__(\"./node_modules/ramda/es/startsWith.js\");\n;// CONCATENATED MODULE: ./src/js/utils/data/object-to-form-data.js\nvar objectToFormData = function objectToFormData(obj, rootName, ignoreList) {\n  var formData = new window.FormData();\n\n  function appendFormData(data, root) {\n    if (!ignore(root)) {\n      root = root || '';\n\n      if (data instanceof window.File) {\n        formData.append(root, data);\n      } else if (Array.isArray(data)) {\n        for (var i = 0; i < data.length; i++) {\n          appendFormData(data[i], root + '[' + i + ']');\n        }\n      } else if (typeof data === 'object' && data) {\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            if (root === '') {\n              appendFormData(data[key], key);\n            } else {\n              appendFormData(data[key], root + '.' + key);\n            }\n          }\n        }\n      } else if (data !== null && typeof data !== 'undefined') {\n        formData.append(root, data);\n      }\n    }\n  }\n\n  function ignore(root) {\n    return Array.isArray(ignoreList) && ignoreList.some(function (x) {\n      return x === root;\n    });\n  }\n\n  appendFormData(obj, rootName);\n  return formData;\n};\n\n/* harmony default export */ var object_to_form_data = (objectToFormData);\n// EXTERNAL MODULE: ./node_modules/query-string/index.js\nvar query_string = __webpack_require__(\"./node_modules/query-string/index.js\");\n// EXTERNAL MODULE: ./node_modules/underscore.string/stripTags.js\nvar stripTags = __webpack_require__(\"./node_modules/underscore.string/stripTags.js\");\nvar stripTags_default = /*#__PURE__*/__webpack_require__.n(stripTags);\n// EXTERNAL MODULE: ./node_modules/underscore.string/trim.js\nvar trim = __webpack_require__(\"./node_modules/underscore.string/trim.js\");\nvar trim_default = /*#__PURE__*/__webpack_require__.n(trim);\n// EXTERNAL MODULE: ./node_modules/underscore.string/unescapeHTML.js\nvar unescapeHTML = __webpack_require__(\"./node_modules/underscore.string/unescapeHTML.js\");\nvar unescapeHTML_default = /*#__PURE__*/__webpack_require__.n(unescapeHTML);\n;// CONCATENATED MODULE: ./src/js/utils/request.js\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n/**\n * The request module abstracts away most of the pain of dealing with raw fetch.\n * Basic principles:\n * When a base_path needs variables in it, use the template function as seen below and pass those as \"restParams\" in your options\n * When you need query args appended for a get, pass them as \"params\" in your options object\n * When you want to POST set method: 'POST' and if passing json body set json: { data } in your options\n */\n// reasonably generic post (or get)\n// pathKey must be one of PATH_MAP\n// if pathKey references a template function,\n// then options should have a restParams key, which functions as a dictionary for the url template\n// can also have a params key, which is a dict of queryParams\n// you can also add other valid fetch options, to options (such as method and body)\nfunction request(_x) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = (0,asyncToGenerator.default)( /*#__PURE__*/regenerator_default().mark(function _callee(pathKey) {\n    var options,\n        defaultOptions,\n        newOptions,\n        host,\n        path,\n        url,\n        parseBody,\n        params,\n        filteredParams,\n        p,\n        initialHeaders,\n        headers,\n        start,\n        _args = arguments;\n    return regenerator_default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            defaultOptions = _objectSpread({\n              method: 'GET'\n            }, options);\n            newOptions = (0,omit.default)(['body'], defaultOptions);\n\n            if (!(!pathKey || !PATH_MAP[pathKey])) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error(\"Unknown pathKey: \".concat(pathKey));\n\n          case 5:\n            host = newOptions.baseUrl || (external_gflow_config_default()).site_url;\n            path = PATH_MAP[pathKey].endpoint;\n\n            if ((0,is.default)(Function, path)) {\n              path = PATH_MAP[pathKey].endpoint(_objectSpread(_objectSpread({}, options.body), newOptions.restParams));\n            }\n\n            console.log(host);\n            url = \"\".concat(host).concat(path); // encode as multipart/form-data\n\n            if (newOptions.method !== 'GET' && newOptions.method !== 'HEAD') {\n              parseBody = options.body ? options.body : {};\n              newOptions.body = object_to_form_data(parseBody);\n            } // todo: the real fix here is to check the content-type and encode as required,\n            // since body is already an associative array\n            // override if POSTing json\n\n\n            if (newOptions.json) {\n              newOptions.body = JSON.stringify(newOptions.json);\n            } // any params destined to become query parameters\n\n\n            params = newOptions.params || {};\n\n            if (params && !(0,isEmpty.default)(params)) {\n              filteredParams = pickBy_default()(params, (identity_default()));\n              p = (0,query_string.stringify)(filteredParams, {\n                arrayFormat: 'bracket'\n              });\n              url = \"\".concat(url, \"?\").concat(p);\n            }\n\n            initialHeaders = PATH_MAP[pathKey].nonce ? {\n              'X-WP-Nonce': PATH_MAP[pathKey].nonce,\n              'Content-Type': 'application/json'\n            } : {};\n            headers = newOptions.headers ? _objectSpread(_objectSpread({}, initialHeaders), newOptions.headers) : initialHeaders;\n            console.info(\"Fetching url: \".concat(url));\n            console.info('with options', _objectSpread(_objectSpread({}, newOptions), {}, {\n              body: newOptions.body\n            }));\n            console.info('and headers: ', headers);\n            start = Date.now(); // do the fetch\n\n            return _context.abrupt(\"return\", window.fetch(url, _objectSpread(_objectSpread({}, newOptions), {}, {\n              headers\n            })).then(function (response) {\n              if (response.ok) {\n                return response.text().then(function (text) {\n                  try {\n                    var data = JSON.parse(text);\n                    var time = Date.now() - start;\n                    console.info(\"Data for \".concat(pathKey, \" in \").concat(time, \"ms:\"), data);\n                    return {\n                      data,\n                      status: response.status,\n                      totalPages: response.headers.get('x-wp-totalpages'),\n                      totalPosts: response.headers.get('x-wp-total')\n                    };\n                  } catch (error) {\n                    var message = trim_default()(stripTags_default()(unescapeHTML_default()(text)));\n                    var err = new Error(\"Invalid server response. \".concat(message));\n                    err.detail = {\n                      url,\n                      data: message,\n                      status: response.status,\n                      error\n                    };\n                    throw err;\n                  }\n                });\n              } // we get 40x's and 500's with valid json\n              // we also seem to get errors with application/json which are actually html/text? (see #92408)\n              // ie expected errors - need to make sure these get handled!!\n\n\n              // we get 40x's and 500's with valid json\n              // we also seem to get errors with application/json which are actually html/text? (see #92408)\n              // ie expected errors - need to make sure these get handled!!\n              if ((0,startsWith.default)(response.headers.get('Content-Type'), 'application/json')) {\n                return response.text().then(function (text) {\n                  try {\n                    var data = JSON.parse(text);\n                    console.info(\"Data for \".concat(pathKey, \":\"), data);\n                    return {\n                      data,\n                      status: response.status\n                    };\n                  } catch (error) {\n                    var message = trim_default()(stripTags_default()(unescapeHTML_default()(text)));\n                    var err = new Error(\"Invalid server response. \".concat(message));\n                    err.detail = {\n                      url,\n                      data: message,\n                      status: response.status,\n                      error\n                    };\n                    throw err;\n                  }\n                });\n              } // error\n\n\n              // error\n              return response.text().then(function (data) {\n                var message = trim_default()(stripTags_default()(unescapeHTML_default()(data)));\n                var err = new Error(\"Unknown server response. \".concat(message));\n                err.detail = {\n                  url,\n                  data: message,\n                  status: response.status\n                };\n                throw err;\n              });\n            }).catch(function (error) {\n              console.info(JSON.stringify(error));\n              console.info(error.detail);\n              return {\n                error\n              };\n            }));\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _request.apply(this, arguments);\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n;// CONCATENATED MODULE: ./src/js/templates/components/flyout.js\n/**\n * @function settingToggle\n * @description The gear icon for an ag grid instance that will trigger the settings flyout\n */\nvar flyoutContainer = function flyoutContainer() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var closeButtonClasses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var direction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var position = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var title = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  var wrapperClasses = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';\n  return \"\\n\\t<article id=\\\"\".concat(id, \"\\\" class=\\\"\").concat(wrapperClasses, \" gform-flyout--\").concat(direction, \" gform-flyout--\").concat(position, \"\\\">\\n\\t\\t<button \\n\\t\\t\\tclass=\\\"\").concat(closeButtonClasses, \" gform-button gform-button--secondary gform-button--circular gform-button--size-xs\\\"\\n\\t\\t\\tdata-js=\\\"gform-flyout-close\\\" \\n\\t\\t\\ttitle=\\\"Close this flyout\\\"\\n\\t\\t>\\n\\t\\t\\t<i class=\\\"gform-button__icon gflow-icon gflow-icon--delete\\\"></i>\\n\\t\\t</button>\\n\\t\\t\").concat(title || description ? '<header class=\"gform-flyout__head\">' : '', \"\\n\\t\\t\").concat(title ? \"<div class=\\\"gform-flyout__title\\\">\".concat(title, \"</div>\") : '', \"\\n\\t\\t\").concat(description ? \"<div class=\\\"gform-flyout__desc\\\">\".concat(description, \"</div>\") : '', \"\\n\\t\\t\").concat(title || description ? '</header>' : '', \"\\n\\t\\t<div class=\\\"gform-flyout__body\\\">\").concat(content, \"</div>\\n\\t</article>\\n\\t\");\n}; // todo: needs i18n\n// EXTERNAL MODULE: ./src/js/utils/tools.js\nvar tools = __webpack_require__(\"./src/js/utils/tools.js\");\n;// CONCATENATED MODULE: ./src/js/utils/a11y/focus-loop.js\n\n/**\n * @function focusLoop\n * @description Loop through focusable els inside a container. Bound to a keydown listener usually.\n *\n * @param {KeyboardEvent} e\n * @param {HTMLElement} trigger\n * @param {HTMLElement} container\n * @param {Function} onEscape\n */\n\nfunction focusLoop() {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var onEscape = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n  if (!container || !trigger) {\n    console.error('You need to pass a container and trigger node to focusLoop.');\n    return;\n  } // esc key, refocus the settings trigger in the editor preview for the active field\n\n\n  if (e.keyCode === 27) {\n    trigger.focus();\n    onEscape();\n    return;\n  } // not tab key, exit\n\n\n  if (e.keyCode !== 9) {\n    return;\n  } // get visible focusable items\n\n\n  var focusable = tools.getFocusable(container); // store first and last visible item\n\n  var firstFocusableEl = focusable[0];\n  var lastFocusableEl = focusable[focusable.length - 1]; // shiftkey was involved, we're going backwards, focus last el if we are leaving first\n\n  if (e.shiftKey) {\n    /* shift + tab */\n    if (document.activeElement === firstFocusableEl) {\n      lastFocusableEl.focus();\n      e.preventDefault();\n    } // regular tabbing direction, bring us back to first el at reaching end\n\n  }\n  /* tab */\n  else if (document.activeElement === lastFocusableEl) {\n      firstFocusableEl.focus();\n      e.preventDefault();\n    }\n}\n;// CONCATENATED MODULE: ./src/js/utils/data/unique-id.js\n/**\n * @function uniqueId\n * @description Generate a unique id\n *\n * @param {string} prefix\n * @return {string}\n */\nfunction uniqueId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  return \"\".concat(prefix, \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n;// CONCATENATED MODULE: ./src/js/common/components/flyout.js\n\n\n\n\n\n\n\n\n\nvar Flyout = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   */\n  function Flyout() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck.default)(this, Flyout);\n\n    (0,defineProperty.default)(this, \"closeFlyout\", function () {\n      if (!_this.flyoutElement.classList.contains('anim-in-active')) {\n        return;\n      }\n\n      _this.flyoutElement.classList.remove('anim-in-ready');\n\n      _this.flyoutElement.classList.remove('anim-in-active');\n\n      _this.flyoutElement.classList.add('anim-out-ready');\n\n      window.setTimeout(function () {\n        _this.flyoutElement.classList.add('anim-out-active');\n      }, 25);\n      window.setTimeout(function () {\n        _this.flyoutElement.classList.remove('anim-out-ready');\n\n        _this.flyoutElement.classList.remove('anim-out-active');\n      }, _this.animationDelay);\n      _this.state.open = false;\n\n      _this.onClose();\n    });\n\n    (0,defineProperty.default)(this, \"maybeCloseFlyout\", function (e) {\n      var _e$detail;\n\n      if (((_e$detail = e.detail) === null || _e$detail === void 0 ? void 0 : _e$detail.activeId) === _this.id) {\n        return;\n      }\n\n      _this.flyoutElement.classList.remove('anim-in-ready');\n\n      _this.flyoutElement.classList.remove('anim-in-active');\n\n      _this.flyoutElement.classList.remove('anim-out-ready');\n\n      _this.flyoutElement.classList.remove('anim-out-active');\n\n      _this.state.open = false;\n    });\n\n    (0,defineProperty.default)(this, \"handleKeyEvents\", function (e) {\n      return focusLoop(e, _this.triggerElement, _this.flyoutElement, _this.closeFlyout);\n    });\n\n    (0,defineProperty.default)(this, \"handleTriggerClick\", function (e) {\n      _this.triggerElement = e.target;\n\n      if (_this.state.open) {\n        _this.closeFlyout();\n\n        _this.triggerElement.focus();\n\n        _this.state.open = false;\n      } else {\n        _this.showFlyout();\n\n        _this.closeElement.focus();\n\n        _this.state.open = true;\n      }\n    });\n\n    (0,esm_extends.default)(this, {\n      animationDelay: 215,\n      // total runtime of close animation. must be synced with css\n      closeButtonClasses: 'gform-flyout__close',\n      // classes for the close button\n      content: '',\n      // the html content\n      description: '',\n      // the optional description for the flyout\n      direction: 'right',\n      // direction to fly in from, left or right\n      id: uniqueId('flyout'),\n      // id for the flyout\n      insertPosition: 'beforeend',\n      // insert position relative to target\n      lockBody: false,\n      // whether to lock body scroll when open\n      onClose: function onClose() {},\n      // function to fire when closed\n      onOpen: function onOpen() {},\n      // function to fire when opened\n      position: 'fixed',\n      // fixed or absolute positioning\n      renderOnInit: true,\n      // render on initialization?\n      target: 'body',\n      // the selector to append the flyout to\n      title: '',\n      // the optional title for the flyout\n      triggers: '[data-js=\"gform-trigger-flyout\"]',\n      // the selector[s] of the trigger that shows it\n      wrapperClasses: 'gform-flyout' // additional classes for the wrapper\n\n    }, options);\n\n    this.state = {\n      open: false\n    };\n    this.flyoutElement = null;\n    this.triggerElement = null;\n    this.closeElement = null;\n\n    if (this.renderOnInit) {\n      this.init();\n    }\n  }\n\n  (0,createClass.default)(Flyout, [{\n    key: \"showFlyout\",\n    value: function showFlyout() {\n      var _this2 = this;\n\n      this.onOpen();\n      this.flyoutElement.classList.add('anim-in-ready');\n      window.setTimeout(function () {\n        _this2.flyoutElement.classList.add('anim-in-active');\n      }, 25);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var target = document.querySelectorAll(this.target)[0];\n\n      if (!target) {\n        console.error(\"Flyout could not render as \".concat(this.target, \" could not be found.\"));\n        return;\n      }\n\n      target.insertAdjacentHTML(this.insertPosition, flyoutContainer(this.id, this.closeButtonClasses, this.content, this.description, this.direction, this.position, this.title, this.wrapperClasses));\n      this.flyoutElement = document.getElementById(this.id);\n      this.closeElement = tools.getNodes('gform-flyout-close', false, this.flyoutElement)[0];\n      console.info(\"Gravity Flow Common: Initialized flyout component on \".concat(this.target, \".\"));\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this3 = this;\n\n      this.flyoutElement.addEventListener('keydown', this.handleKeyEvents);\n      this.closeElement.addEventListener('click', this.closeFlyout);\n      tools.getNodes(this.triggers, true, document, true).forEach(function (trigger) {\n        return trigger.addEventListener('click', _this3.handleTriggerClick);\n      });\n      document.addEventListener('gform/close-flyouts', this.maybeCloseFlyout);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.render();\n      this.bindEvents();\n    }\n  }]);\n\n  return Flyout;\n}();\n\n\n;// CONCATENATED MODULE: ./src/js/common/config/constants.js\nvar INBOX_DEFAULT_ID = 'inbox_default';\n;// CONCATENATED MODULE: ./src/js/templates/components/grid.js\n/**\n * @function settingToggle\n * @description The gear icon for an ag grid instance that will trigger the settings flyout\n */\nvar settingToggle = function settingToggle() {\n  var triggerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'grid-settings';\n  var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return \"\\n\\t<button \\n\\t\\tclass=\\\"gflow-grid__button gflow-grid__button--settings gflow-icon gflow-icon--cog\\\" \\n\\t\\tdata-js=\\\"\".concat(triggerId, \"\\\" \\n\\t\\ttitle=\\\"\").concat(title, \"\\\"\\n\\t></button>\\n\\t\");\n};\n;// CONCATENATED MODULE: ./src/js/templates/components/input.js\n/**\n * Input template\n *\n * @param {string} type\n * @param {string} id\n * @param {string} name\n * @param {string} value\n * @param {string} classes\n * @param {string} jsAttribute\n * @param {string} placeholder\n *\n * @return {string}\n */\n/* harmony default export */ function input() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'text';\n  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var classes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'gform-input';\n  var jsAttribute = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'gform-input';\n  var placeholder = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  return \"\\n\\t<input \\n\\t\\tclass=\\\"\".concat(classes, \"\\\" \\n\\t\\tvalue=\\\"\").concat(value, \"\\\" \\n\\t\\ttype=\\\"\").concat(type, \"\\\" \\n\\t\\tdata-js=\\\"\").concat(jsAttribute, \"\\\"\\n\\t\\t\").concat(placeholder ? \"placeholder=\\\"\".concat(placeholder, \"\\\"\") : '', \"\\n\\t\\t\").concat(id ? \"id=\\\"\".concat(id, \"\\\"\") : '', \"\\n\\t\\t\").concat(name ? \"name=\\\"\".concat(name, \"\\\"\") : '', \"\\n\\t/>\\n\\t\");\n}\n;// CONCATENATED MODULE: ./src/js/templates/components/toggle.js\n/**\n * Toggle template\n *\n * @param {string} id\n * @param {string} name\n * @param {boolean} checked\n * @param {string} disabledLabel\n * @param {string} enabledLabel\n * @param {string} wrapperClasses\n * @param {string} jsAttribute\n *\n * @return {string}\n */\n/* harmony default export */ function toggle() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var checked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var disabledLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var enabledLabel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var wrapperClasses = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'gform-field__toggle';\n  var jsAttribute = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'gform-toggle';\n  return \"\\n\\t<div class=\\\"\".concat(wrapperClasses, \"\\\">\\n\\t\\t<span class=\\\"gform-settings-input__container\\\">\\n\\t\\t\\t<input \\n\\t\\t\\t\\ttype=\\\"checkbox\\\" \\n\\t\\t\\t\\tclass=\\\"gform-field__toggle-input\\\" \\n\\t\\t\\t\\tdata-js=\\\"\").concat(jsAttribute, \"\\\" \\n\\t\\t\\t\\t\").concat(id ? \"id=\".concat(id) : '', \"\\n\\t\\t\\t\\t\").concat(name ? \"name=\".concat(name) : '', \"\\n\\t\\t\\t\\t\").concat(checked ? 'checked' : '', \"\\n\\t\\t\\t>\\n\\t\\t\\t<label class=\\\"gform-field__toggle-container\\\" \").concat(id ? \"for=\".concat(id) : '', \">\\n\\t\\t\\t\\t<span \\n\\t\\t\\t\\t\\tclass=\\\"gform-field__toggle-switch-text screen-reader-text\\\"\\n\\t\\t\\t\\t\\tdata-disabled-text=\\\"\").concat(disabledLabel, \"\\\"\\n\\t\\t\\t\\t\\tdata-enabled-text=\\\"\").concat(enabledLabel, \"\\\"\\n\\t\\t\\t\\t>\").concat(checked ? enabledLabel : disabledLabel, \"</span>\\n\\t\\t\\t\\t<span class=\\\"gform-field__toggle-switch\\\"></span>\\n\\t\\t\\t</label>\\n\\t\\t</span>\\n\\t</div>\\n\\t\");\n}\n;// CONCATENATED MODULE: ./src/js/templates/grids/inbox.js\n\n\n\n/**\n * @function settings\n * @description The content for the inbox settings flyout\n */\n\nvar settings = function settings() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uniqueId('inbox-settings-');\n  return \"\\n\\t<span class=\\\"gform-flyout__setting-label\\\">\\n\\t\\tEnable Push Notifications\\n\\t</span>\\n\\t<span class=\\\"gform-flyout__setting-desc\\\">\\n\\t\\tYou will have to allow push notifications for this domain and browser to enable this feature. If you haven't already,\\n\\t\\tyour browser will ask you to enable them one time.\\n\\t</span>\\n\\t\".concat(toggle(id, id, false, 'disabled', 'enabled', 'gform-field__toggle gform-flyout__setting', 'inbox-setting'), \"\\n\\t\");\n};\n/**\n * @function header\n * @description The inbox header with search.\n */\n\nvar header = function header() {\n  var searchId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uniqueId('inbox-header-');\n  return \"\\n\\t<div class=\\\"gflow-grid__header\\\">\\n\\t\\t\".concat(input('search', searchId, '', '', 'gform-input gflow-inbox__search', 'gflow-inbox-search', 'Search Inbox'), \"\\n\\t</div>\\n\\t\");\n};\n;// CONCATENATED MODULE: ./src/js/common/grids/inbox.js\n\n\n\n\n/**\n * Inbox\n *\n * Initializes the inbox component\n */\n\n\n\n\n\n\n\n\n\nvar el = {};\nvar instances = {\n  grids: {},\n  gridOptions: {},\n  flyouts: {}\n};\nvar globalOptions = {\n  animateRows: false\n};\nvar data = ((external_gflow_config_default()) === null || (external_gflow_config_default()) === void 0 ? void 0 : (external_gflow_config_default()).grids) || {};\nvar config = (external_gflow_config_default()) || {};\nvar defaultGridId = Object.keys(data)[0] || INBOX_DEFAULT_ID;\n/**\n * @function intComparator\n * @description Function used by ag grid when sorting numeric columns\n *\n * @since 2.7.4\n *\n * @param {...*} args The args sent to this method, which are\n *                    {String}  The current column object.\n *                    {String}  The first value to compare.\n *                    {String}  The second value to compare.\n *                    {Object}  The node representing the first row.\n *                    {Object}  The node representing the second row.\n *                    {Boolean} Whether the current sort is inverted.\n *\n * @return {number} Either -1, 0, or 1.\n */\n\nvar intComparator = function intComparator() {\n  var _args$3$data$args$0$s, _args$4$data$args$0$s;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var value1 = (_args$3$data$args$0$s = args[3].data[args[0].sortKey]) !== null && _args$3$data$args$0$s !== void 0 ? _args$3$data$args$0$s : args[1];\n  var value2 = (_args$4$data$args$0$s = args[4].data[args[0].sortKey]) !== null && _args$4$data$args$0$s !== void 0 ? _args$4$data$args$0$s : args[2];\n  return Math.sign(parseInt(value1) - parseInt(value2));\n};\n/**\n * @function applyColumnComparator\n * @description Apply a comparator based on column type. String or int.\n *\n * @since 2.7.4\n *\n * @param {Object} column\n * @return {*}\n */\n\n\nvar applyColumnComparator = function applyColumnComparator(column) {\n  if (column.compareType === 'string') {\n    return column;\n  }\n\n  column.comparator = intComparator.bind(null, column);\n  return column;\n};\n/**\n * @function getGridId\n * @description Gets the grid id used to match options to instances in the dom.\n *\n * @since 2.7.4\n *\n * @param {HTMLElement} grid The wrapping container the grid is injected to\n * @return {string}\n */\n\n\nvar getGridId = function getGridId(grid) {\n  return grid.dataset.gridId || INBOX_DEFAULT_ID;\n};\n/**\n * @function getGridOptions\n * @description Merges global options with the instance specific options for a grid instance.\n *\n * @since 2.7.4\n *\n * @param {string} gridId The unique identifier for the grid instance.\n * @return {Object}\n */\n\nvar getGridOptions = function getGridOptions() {\n  var gridId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INBOX_DEFAULT_ID;\n  return (0,esm_extends.default)({}, data[gridId].grid_options, globalOptions);\n};\n/**\n * @function initializeGrid\n * @description Initializes an ag grid instance on the passed containing div.\n *\n * @since 2.7.4\n *\n * @param {HTMLElement} grid The grid container.\n */\n\nvar initializeGrid = function initializeGrid(grid) {\n  var _data$gridId;\n\n  var gridId = getGridId(grid);\n\n  if (!((_data$gridId = data[gridId]) !== null && _data$gridId !== void 0 && _data$gridId.grid_options)) {\n    console.error(\"Cant find inbox options for grid id: \".concat(gridId));\n  }\n\n  instances.gridOptions[gridId] = getGridOptions(gridId);\n\n  instances.gridOptions[gridId].getRowNodeId = function (row) {\n    return parseInt(row.id);\n  };\n\n  instances.gridOptions[gridId].columnDefs.forEach(function (column, index) {\n    instances.gridOptions[gridId].columnDefs[index] = applyColumnComparator(column);\n  });\n  instances.grids[gridId] = new ag_grid_community_cjs.Grid(grid, instances.gridOptions[gridId]);\n  initializeSearch(grid);\n  initializeSettings(grid, gridId);\n  var sortCol = (config === null || config === void 0 ? void 0 : config.default_sort_col) || 'none';\n  var sortDir = (config === null || config === void 0 ? void 0 : config.default_sort_dir) || 'asc';\n\n  if (sortCol === 'none') {\n    return;\n  }\n\n  var gridCol = instances.gridOptions[gridId].columnApi.getColumn(sortCol);\n\n  if (!gridCol) {\n    return;\n  }\n\n  instances.gridOptions[gridId].columnApi.applyColumnState({\n    state: [{\n      colId: sortCol,\n      sort: sortDir\n    }]\n  });\n};\n/**\n * @function initializeSettings\n * @description Inject the settings trigger and instantiate the flyout\n */\n\nvar initializeSettings = function initializeSettings(grid, gridId) {\n  grid.insertAdjacentHTML('afterbegin', settingToggle('inbox-settings', 'Toggle settings for this table' // todo: needs i18n\n  ));\n  instances.flyouts[gridId] = new Flyout({\n    content: settings(),\n    position: 'absolute',\n    target: '.gflow-inbox.gflow-grid',\n    title: 'Inbox Settings',\n    triggers: '[data-js=\"inbox-settings\"]',\n    wrapperClasses: 'gform-flyout gform-flyout--inbox-settings'\n  });\n};\n/**\n * @function initializeSearch\n * @description Inject the search input for the whole table instance.\n */\n\n\nvar initializeSearch = function initializeSearch(grid) {\n  grid.insertAdjacentHTML('afterbegin', header());\n};\n\nvar getIdsFromModel = function getIdsFromModel() {\n  var ids = [];\n  instances.gridOptions[defaultGridId].api.forEachNode(function (node) {\n    return ids.push(node.data.id);\n  });\n  return ids;\n};\n\nvar refreshGrid = /*#__PURE__*/function () {\n  var _ref = (0,asyncToGenerator.default)( /*#__PURE__*/regenerator_default().mark(function _callee() {\n    var _data$defaultGridId, _data$defaultGridId2;\n\n    var current_ids, formData, response;\n    return regenerator_default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            current_ids = getIdsFromModel();\n            formData = new window.FormData();\n            current_ids.forEach(function (item) {\n              return formData.append('current_ids[]', item);\n            });\n            formData.append('gflow_access_token', ((_data$defaultGridId = data[defaultGridId]) === null || _data$defaultGridId === void 0 ? void 0 : _data$defaultGridId.current_user_token) || null);\n            _context.next = 6;\n            return request('refresh_inbox_items', {\n              method: 'POST',\n              body: {\n                gflow_access_token: ((_data$defaultGridId2 = data[defaultGridId]) === null || _data$defaultGridId2 === void 0 ? void 0 : _data$defaultGridId2.current_user_token) || null,\n                current_ids\n              }\n            });\n\n          case 6:\n            response = _context.sent;\n            instances.gridOptions[defaultGridId].api.applyTransaction(response.data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function refreshGrid() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @function handleSettingsChange\n * @description Handle changes to the settings for the inbox\n */\n\n\nvar handleSettingsChange = function handleSettingsChange(e) {\n  // switch based on setting name to handle cases, name is also value stored and passed in on init from php in config\n  console.log(e.delegateTarget.name);\n};\n/**\n * @function applySearch\n * @description Apply a search term to the grid.\n */\n\n\nvar applySearch = function applySearch(e) {\n  var input = e.delegateTarget;\n  var gridContainer = tools.closest(input, '[data-js=\"gflow-inbox\"]');\n  var gridId = getGridId(gridContainer);\n  instances.gridOptions[gridId].api.setQuickFilter(input.value);\n  console.log('hi');\n};\n/**\n * @function initializeGrids\n * @description Iterate over all found grids and initialize.\n */\n\n\nvar initializeGrids = function initializeGrids() {\n  el.containers.forEach(function (grid) {\n    return initializeGrid(grid);\n  });\n};\n\nvar bindEvents = function bindEvents() {\n  var refreshButton = document.querySelector('[data-js=\"refresh_inbox\"]');\n  refreshButton.addEventListener('click', function (e) {\n    e.preventDefault();\n    refreshGrid();\n  });\n  delegate_default()(document.body, '[data-js=\"inbox-setting\"]', 'change', handleSettingsChange);\n  delegate_default()(document.body, '[data-js=\"gflow-inbox-search\"]', 'keyup', applySearch);\n};\n\nvar init = function init(containers) {\n  el.containers = containers;\n  initializeGrids();\n  bindEvents();\n  console.info('Gravity Flow Common: Initialized inbox components.');\n};\n\n/* harmony default export */ var inbox = (init);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy9jb21tb24vY29uZmlnL3JlcXVlc3QuanM/NzE1OCIsIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy91dGlscy9kYXRhL29iamVjdC10by1mb3JtLWRhdGEuanM/ODkxNyIsIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy91dGlscy9yZXF1ZXN0LmpzP2FlMTUiLCJ3ZWJwYWNrOi8vZ3Jhdml0eWZsb3cvLi9zcmMvanMvdGVtcGxhdGVzL2NvbXBvbmVudHMvZmx5b3V0LmpzPzhiNDYiLCJ3ZWJwYWNrOi8vZ3Jhdml0eWZsb3cvLi9zcmMvanMvdXRpbHMvYTExeS9mb2N1cy1sb29wLmpzPzljYjIiLCJ3ZWJwYWNrOi8vZ3Jhdml0eWZsb3cvLi9zcmMvanMvdXRpbHMvZGF0YS91bmlxdWUtaWQuanM/MjBkMiIsIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy9jb21tb24vY29tcG9uZW50cy9mbHlvdXQuanM/MDY1NSIsIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy9jb21tb24vY29uZmlnL2NvbnN0YW50cy5qcz83MjA0Iiwid2VicGFjazovL2dyYXZpdHlmbG93Ly4vc3JjL2pzL3RlbXBsYXRlcy9jb21wb25lbnRzL2dyaWQuanM/MjY1ZSIsIndlYnBhY2s6Ly9ncmF2aXR5Zmxvdy8uL3NyYy9qcy90ZW1wbGF0ZXMvY29tcG9uZW50cy9pbnB1dC5qcz9hYzJkIiwid2VicGFjazovL2dyYXZpdHlmbG93Ly4vc3JjL2pzL3RlbXBsYXRlcy9jb21wb25lbnRzL3RvZ2dsZS5qcz83NGNkIiwid2VicGFjazovL2dyYXZpdHlmbG93Ly4vc3JjL2pzL3RlbXBsYXRlcy9ncmlkcy9pbmJveC5qcz82NWRhIiwid2VicGFjazovL2dyYXZpdHlmbG93Ly4vc3JjL2pzL2NvbW1vbi9ncmlkcy9pbmJveC5qcz9mMjU1Il0sIm5hbWVzIjpbImVuZHBvaW50cyIsImNvbmZpZyIsImdldFBhdGhNYXAiLCJtYXAiLCJlbmRwb2ludCIsImRhdGEiLCJwYXRoIiwicmVzdF9wYXJhbXMiLCJub25jZSIsIlBBVEhfTUFQIiwib2JqZWN0VG9Gb3JtRGF0YSIsIm9iaiIsInJvb3ROYW1lIiwiaWdub3JlTGlzdCIsImZvcm1EYXRhIiwid2luZG93IiwiRm9ybURhdGEiLCJhcHBlbmRGb3JtRGF0YSIsInJvb3QiLCJpZ25vcmUiLCJGaWxlIiwiYXBwZW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImxlbmd0aCIsImtleSIsImhhc093blByb3BlcnR5Iiwic29tZSIsIngiLCJyZXF1ZXN0IiwicGF0aEtleSIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsIm1ldGhvZCIsIm5ld09wdGlvbnMiLCJvbWl0IiwiRXJyb3IiLCJob3N0IiwiYmFzZVVybCIsImlzIiwiRnVuY3Rpb24iLCJib2R5IiwicmVzdFBhcmFtcyIsImNvbnNvbGUiLCJsb2ciLCJ1cmwiLCJwYXJzZUJvZHkiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcmFtcyIsImlzRW1wdHkiLCJmaWx0ZXJlZFBhcmFtcyIsInAiLCJhcnJheUZvcm1hdCIsImluaXRpYWxIZWFkZXJzIiwiaGVhZGVycyIsImluZm8iLCJzdGFydCIsIkRhdGUiLCJub3ciLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsInBhcnNlIiwidGltZSIsInN0YXR1cyIsInRvdGFsUGFnZXMiLCJnZXQiLCJ0b3RhbFBvc3RzIiwiZXJyb3IiLCJtZXNzYWdlIiwidHJpbSIsInN0cmlwVGFncyIsInVuZXNjYXBlSFRNTCIsImVyciIsImRldGFpbCIsInN0YXJ0c1dpdGgiLCJjYXRjaCIsImZseW91dENvbnRhaW5lciIsImlkIiwiY2xvc2VCdXR0b25DbGFzc2VzIiwiY29udGVudCIsImRlc2NyaXB0aW9uIiwiZGlyZWN0aW9uIiwicG9zaXRpb24iLCJ0aXRsZSIsIndyYXBwZXJDbGFzc2VzIiwiZm9jdXNMb29wIiwiZSIsInRyaWdnZXIiLCJjb250YWluZXIiLCJvbkVzY2FwZSIsImtleUNvZGUiLCJmb2N1cyIsImZvY3VzYWJsZSIsInRvb2xzIiwiZmlyc3RGb2N1c2FibGVFbCIsImxhc3RGb2N1c2FibGVFbCIsInNoaWZ0S2V5IiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwicHJldmVudERlZmF1bHQiLCJ1bmlxdWVJZCIsInByZWZpeCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsIkZseW91dCIsImZseW91dEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImFkZCIsInNldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheSIsInN0YXRlIiwib3BlbiIsIm9uQ2xvc2UiLCJhY3RpdmVJZCIsInRyaWdnZXJFbGVtZW50IiwiY2xvc2VGbHlvdXQiLCJ0YXJnZXQiLCJzaG93Rmx5b3V0IiwiY2xvc2VFbGVtZW50IiwiaW5zZXJ0UG9zaXRpb24iLCJsb2NrQm9keSIsIm9uT3BlbiIsInJlbmRlck9uSW5pdCIsInRyaWdnZXJzIiwiaW5pdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ0ZW1wbGF0ZXMiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVLZXlFdmVudHMiLCJmb3JFYWNoIiwiaGFuZGxlVHJpZ2dlckNsaWNrIiwibWF5YmVDbG9zZUZseW91dCIsInJlbmRlciIsImJpbmRFdmVudHMiLCJJTkJPWF9ERUZBVUxUX0lEIiwic2V0dGluZ1RvZ2dsZSIsInRyaWdnZXJJZCIsInR5cGUiLCJuYW1lIiwidmFsdWUiLCJjbGFzc2VzIiwianNBdHRyaWJ1dGUiLCJwbGFjZWhvbGRlciIsImNoZWNrZWQiLCJkaXNhYmxlZExhYmVsIiwiZW5hYmxlZExhYmVsIiwic2V0dGluZ3MiLCJ0b2dnbGUiLCJoZWFkZXIiLCJzZWFyY2hJZCIsImlucHV0IiwiZWwiLCJpbnN0YW5jZXMiLCJncmlkcyIsImdyaWRPcHRpb25zIiwiZmx5b3V0cyIsImdsb2JhbE9wdGlvbnMiLCJhbmltYXRlUm93cyIsImdmbG93Q29uZmlnIiwiZGVmYXVsdEdyaWRJZCIsIk9iamVjdCIsImtleXMiLCJpbnRDb21wYXJhdG9yIiwiYXJncyIsInZhbHVlMSIsInNvcnRLZXkiLCJ2YWx1ZTIiLCJzaWduIiwicGFyc2VJbnQiLCJhcHBseUNvbHVtbkNvbXBhcmF0b3IiLCJjb2x1bW4iLCJjb21wYXJlVHlwZSIsImNvbXBhcmF0b3IiLCJiaW5kIiwiZ2V0R3JpZElkIiwiZ3JpZCIsImRhdGFzZXQiLCJncmlkSWQiLCJnZXRHcmlkT3B0aW9ucyIsImdyaWRfb3B0aW9ucyIsImluaXRpYWxpemVHcmlkIiwiZ2V0Um93Tm9kZUlkIiwicm93IiwiY29sdW1uRGVmcyIsImluZGV4IiwiR3JpZCIsImluaXRpYWxpemVTZWFyY2giLCJpbml0aWFsaXplU2V0dGluZ3MiLCJzb3J0Q29sIiwiZGVmYXVsdF9zb3J0X2NvbCIsInNvcnREaXIiLCJkZWZhdWx0X3NvcnRfZGlyIiwiZ3JpZENvbCIsImNvbHVtbkFwaSIsImdldENvbHVtbiIsImFwcGx5Q29sdW1uU3RhdGUiLCJjb2xJZCIsInNvcnQiLCJncmlkVGVtcGxhdGVzIiwiaW5ib3hUZW1wbGF0ZXMiLCJnZXRJZHNGcm9tTW9kZWwiLCJpZHMiLCJhcGkiLCJmb3JFYWNoTm9kZSIsIm5vZGUiLCJwdXNoIiwicmVmcmVzaEdyaWQiLCJjdXJyZW50X2lkcyIsIml0ZW0iLCJjdXJyZW50X3VzZXJfdG9rZW4iLCJnZmxvd19hY2Nlc3NfdG9rZW4iLCJhcHBseVRyYW5zYWN0aW9uIiwiaGFuZGxlU2V0dGluZ3NDaGFuZ2UiLCJkZWxlZ2F0ZVRhcmdldCIsImFwcGx5U2VhcmNoIiwiZ3JpZENvbnRhaW5lciIsInNldFF1aWNrRmlsdGVyIiwiaW5pdGlhbGl6ZUdyaWRzIiwiY29udGFpbmVycyIsInJlZnJlc2hCdXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiZGVsZWdhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUNYLEtBQTFEO0FBQ0EzRyxTQUFPLENBQUNDLEdBQVIsQ0FBYSxJQUFiO0FBQ0EsQ0FORDtBQVFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxJQUFNd0wsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixHQUFNO0FBQzdCbEUsSUFBRSxDQUFDbUUsVUFBSCxDQUFjekYsT0FBZCxDQUF1QixVQUFFOEMsSUFBRjtBQUFBLFdBQVlLLGNBQWMsQ0FBRUwsSUFBRixDQUExQjtBQUFBLEdBQXZCO0FBQ0EsQ0FGRDs7QUFJQSxJQUFNMUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBTTtBQUN4QixNQUFNc0YsYUFBYSxHQUFHaEksUUFBUSxDQUFDaUksYUFBVCxDQUF3QiwyQkFBeEIsQ0FBdEI7QUFDQUQsZUFBYSxDQUFDNUYsZ0JBQWQsQ0FBZ0MsT0FBaEMsRUFBeUMsVUFBVy9DLENBQVgsRUFBZTtBQUN2REEsS0FBQyxDQUFDYSxjQUFGO0FBQ0FpSCxlQUFXO0FBQ1gsR0FIRDtBQUtBZSxvQkFBUSxDQUNQbEksUUFBUSxDQUFDN0QsSUFERixFQUVQLDJCQUZPLEVBR1AsUUFITyxFQUlQc0wsb0JBSk8sQ0FBUjtBQU9BUyxvQkFBUSxDQUNQbEksUUFBUSxDQUFDN0QsSUFERixFQUVQLGdDQUZPLEVBR1AsT0FITyxFQUlQd0wsV0FKTyxDQUFSO0FBTUEsQ0FwQkQ7O0FBc0JBLElBQU01RixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFFZ0csVUFBRixFQUFrQjtBQUM5Qm5FLElBQUUsQ0FBQ21FLFVBQUgsR0FBZ0JBLFVBQWhCO0FBRUFELGlCQUFlO0FBQ2ZwRixZQUFVO0FBRVZyRyxTQUFPLENBQUNjLElBQVIsQ0FBYyxvREFBZDtBQUNBLENBUEQ7O0FBU0EsMENBQWU0RSxJQUFmIiwiZmlsZSI6Ii4vc3JjL2pzL2NvbW1vbi9ncmlkcy9pbmJveC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcgZnJvbSAnZ2Zsb3ctY29uZmlnJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKiBHZXQgeW91ciBlbmRwb2ludHMgc2FmZWx5IGhlcmUgZmlyc3Qgd2l0aCBvcHRpb25hbCBjaGFpbmluZ1xuICovXG5cbmV4cG9ydCBjb25zdCBlbmRwb2ludHMgPSBjb25maWc/LmVuZHBvaW50cztcblxuLyoqXG4gKiBOb3cgbWFwIHRoZW0gdG8gYWN0aW9uIG5hbWVzIGFuZCBhZGQgdGVtcGxhdGVzIGFzIG5lZWRlZFxuICovXG5cbmNvbnN0IGdldFBhdGhNYXAgPSAoKSA9PiB7XG5cdGNvbnN0IG1hcCA9IHt9O1xuXG5cdC8vIEFkZCBwcm9kdWN0IHRvIGEgcHJvamVjdFxuXHQvLyBleGFtcGxlOlxuXHQvLyByZXF1ZXN0KCdleGFtcGxlJywgeyBtZXRob2Q6ICdQT1NUJywgcmVzdFBhcmFtczogeyBwcm9qZWN0X2lkOiBpbnQgfSwganNvbjogeyBzcGFjZTogaW50LCBpdGVtczogW3sgcG9zdF9pZDogaW50LCBjb25maWd1cmF0aW9uOiAnJywgcXVhbnRpdHk6IGludCB9XSB9fSkudGhlbihkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuXHQvLyBBY2NlcHRlZCBwcm9wZXJ0aWVzIGluIHRoZSBKU09OIGJvZHkgYXJlXG5cdC8vIHNwYWNlICh0aGUgKG9wdGlvbmFsKSBJRCBvZiB0aGUgc2VsZWN0ZWQgc3BhY2Ugd2l0aGluIHRoZSBwcm9qZWN0KSBhbmRcblx0Ly8gaXRlbXMsIGFuIGFycmF5IG9mIGV4YW1wbGUgaXRlbXMuXG5cdGZvciAoIGNvbnN0IGVuZHBvaW50IGluIGVuZHBvaW50cyApIHtcblx0XHRjb25zdCBkYXRhID0gZW5kcG9pbnRzWyBlbmRwb2ludCBdO1xuXHRcdG1hcFsgZW5kcG9pbnQgXSA9IHtcblx0XHRcdGVuZHBvaW50OiB0ZW1wbGF0ZSggYCR7IGRhdGEucGF0aCB9JHsgZGF0YS5yZXN0X3BhcmFtcyB9YCApLFxuXHRcdFx0bm9uY2U6IGRhdGEubm9uY2UsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBtYXA7XG59O1xuXG5leHBvcnQgY29uc3QgUEFUSF9NQVAgPSBnZXRQYXRoTWFwKCk7XG4iLCJjb25zdCBvYmplY3RUb0Zvcm1EYXRhID0gKCBvYmosIHJvb3ROYW1lLCBpZ25vcmVMaXN0ICkgPT4ge1xuXHRjb25zdCBmb3JtRGF0YSA9IG5ldyB3aW5kb3cuRm9ybURhdGEoKTtcblxuXHRmdW5jdGlvbiBhcHBlbmRGb3JtRGF0YSggZGF0YSwgcm9vdCApIHtcblx0XHRpZiAoICEgaWdub3JlKCByb290ICkgKSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCAnJztcblx0XHRcdGlmICggZGF0YSBpbnN0YW5jZW9mIHdpbmRvdy5GaWxlICkge1xuXHRcdFx0XHRmb3JtRGF0YS5hcHBlbmQoIHJvb3QsIGRhdGEgKTtcblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRhcHBlbmRGb3JtRGF0YSggZGF0YVsgaSBdLCByb290ICsgJ1snICsgaSArICddJyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSApIHtcblx0XHRcdFx0Zm9yICggY29uc3Qga2V5IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmhhc093blByb3BlcnR5KCBrZXkgKSApIHtcblx0XHRcdFx0XHRcdGlmICggcm9vdCA9PT0gJycgKSB7XG5cdFx0XHRcdFx0XHRcdGFwcGVuZEZvcm1EYXRhKCBkYXRhWyBrZXkgXSwga2V5ICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRhcHBlbmRGb3JtRGF0YSggZGF0YVsga2V5IF0sIHJvb3QgKyAnLicgKyBrZXkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIGRhdGEgIT09IG51bGwgJiYgdHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnICkge1xuXHRcdFx0XHRmb3JtRGF0YS5hcHBlbmQoIHJvb3QsIGRhdGEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpZ25vcmUoIHJvb3QgKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdEFycmF5LmlzQXJyYXkoIGlnbm9yZUxpc3QgKSAmJlxuXHRcdFx0aWdub3JlTGlzdC5zb21lKCAoIHggKSA9PiB4ID09PSByb290IClcblx0XHQpO1xuXHR9XG5cblx0YXBwZW5kRm9ybURhdGEoIG9iaiwgcm9vdE5hbWUgKTtcblxuXHRyZXR1cm4gZm9ybURhdGE7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb0Zvcm1EYXRhO1xuIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdnZmxvdy1jb25maWcnO1xuaW1wb3J0IHsgUEFUSF9NQVAgfSBmcm9tICdjb21tb24vY29uZmlnL3JlcXVlc3QnO1xuaW1wb3J0IHsgaXMsIG9taXQsIHN0YXJ0c1dpdGgsIGlzRW1wdHkgfSBmcm9tICdyYW1kYSc7XG5pbXBvcnQgb2JqZWN0VG9Gb3JtRGF0YSBmcm9tICd1dGlscy9kYXRhL29iamVjdC10by1mb3JtLWRhdGEnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAncXVlcnktc3RyaW5nJztcbmltcG9ydCBzdHJpcFRhZ3MgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcvc3RyaXBUYWdzJztcbmltcG9ydCB0cmltIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nL3RyaW0nO1xuaW1wb3J0IHVuZXNjYXBlSFRNTCBmcm9tICd1bmRlcnNjb3JlLnN0cmluZy91bmVzY2FwZUhUTUwnO1xuaW1wb3J0IHsgcGlja0J5LCBpZGVudGl0eSB9IGZyb20gJ2xvZGFzaCc7XG5cbi8qKlxuICogVGhlIHJlcXVlc3QgbW9kdWxlIGFic3RyYWN0cyBhd2F5IG1vc3Qgb2YgdGhlIHBhaW4gb2YgZGVhbGluZyB3aXRoIHJhdyBmZXRjaC5cbiAqIEJhc2ljIHByaW5jaXBsZXM6XG4gKiBXaGVuIGEgYmFzZV9wYXRoIG5lZWRzIHZhcmlhYmxlcyBpbiBpdCwgdXNlIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbiBhcyBzZWVuIGJlbG93IGFuZCBwYXNzIHRob3NlIGFzIFwicmVzdFBhcmFtc1wiIGluIHlvdXIgb3B0aW9uc1xuICogV2hlbiB5b3UgbmVlZCBxdWVyeSBhcmdzIGFwcGVuZGVkIGZvciBhIGdldCwgcGFzcyB0aGVtIGFzIFwicGFyYW1zXCIgaW4geW91ciBvcHRpb25zIG9iamVjdFxuICogV2hlbiB5b3Ugd2FudCB0byBQT1NUIHNldCBtZXRob2Q6ICdQT1NUJyBhbmQgaWYgcGFzc2luZyBqc29uIGJvZHkgc2V0IGpzb246IHsgZGF0YSB9IGluIHlvdXIgb3B0aW9uc1xuICovXG5cbi8vIHJlYXNvbmFibHkgZ2VuZXJpYyBwb3N0IChvciBnZXQpXG4vLyBwYXRoS2V5IG11c3QgYmUgb25lIG9mIFBBVEhfTUFQXG4vLyBpZiBwYXRoS2V5IHJlZmVyZW5jZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbixcbi8vIHRoZW4gb3B0aW9ucyBzaG91bGQgaGF2ZSBhIHJlc3RQYXJhbXMga2V5LCB3aGljaCBmdW5jdGlvbnMgYXMgYSBkaWN0aW9uYXJ5IGZvciB0aGUgdXJsIHRlbXBsYXRlXG4vLyBjYW4gYWxzbyBoYXZlIGEgcGFyYW1zIGtleSwgd2hpY2ggaXMgYSBkaWN0IG9mIHF1ZXJ5UGFyYW1zXG4vLyB5b3UgY2FuIGFsc28gYWRkIG90aGVyIHZhbGlkIGZldGNoIG9wdGlvbnMsIHRvIG9wdGlvbnMgKHN1Y2ggYXMgbWV0aG9kIGFuZCBib2R5KVxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcmVxdWVzdCggcGF0aEtleSwgb3B0aW9ucyA9IHt9ICkge1xuXHRjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4ub3B0aW9ucyB9O1xuXHRjb25zdCBuZXdPcHRpb25zID0gb21pdCggWyAnYm9keScgXSwgZGVmYXVsdE9wdGlvbnMgKTtcblxuXHRpZiAoICEgcGF0aEtleSB8fCAhIFBBVEhfTUFQWyBwYXRoS2V5IF0gKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBgVW5rbm93biBwYXRoS2V5OiAkeyBwYXRoS2V5IH1gICk7XG5cdH1cblx0Y29uc3QgaG9zdCA9IG5ld09wdGlvbnMuYmFzZVVybCB8fCBjb25maWcuc2l0ZV91cmw7XG5cdGxldCBwYXRoID0gUEFUSF9NQVBbIHBhdGhLZXkgXS5lbmRwb2ludDtcblx0aWYgKCBpcyggRnVuY3Rpb24sIHBhdGggKSApIHtcblx0XHRwYXRoID0gUEFUSF9NQVBbIHBhdGhLZXkgXS5lbmRwb2ludCgge1xuXHRcdFx0Li4ub3B0aW9ucy5ib2R5LFxuXHRcdFx0Li4ubmV3T3B0aW9ucy5yZXN0UGFyYW1zLFxuXHRcdH0gKTtcblx0fVxuXHRjb25zb2xlLmxvZyggaG9zdCApO1xuXHRsZXQgdXJsID0gYCR7IGhvc3QgfSR7IHBhdGggfWA7XG5cblx0Ly8gZW5jb2RlIGFzIG11bHRpcGFydC9mb3JtLWRhdGFcblx0aWYgKCBuZXdPcHRpb25zLm1ldGhvZCAhPT0gJ0dFVCcgJiYgbmV3T3B0aW9ucy5tZXRob2QgIT09ICdIRUFEJyApIHtcblx0XHRjb25zdCBwYXJzZUJvZHkgPSBvcHRpb25zLmJvZHkgPyBvcHRpb25zLmJvZHkgOiB7fTtcblx0XHRuZXdPcHRpb25zLmJvZHkgPSBvYmplY3RUb0Zvcm1EYXRhKCBwYXJzZUJvZHkgKTtcblx0fVxuXG5cdC8vIHRvZG86IHRoZSByZWFsIGZpeCBoZXJlIGlzIHRvIGNoZWNrIHRoZSBjb250ZW50LXR5cGUgYW5kIGVuY29kZSBhcyByZXF1aXJlZCxcblx0Ly8gc2luY2UgYm9keSBpcyBhbHJlYWR5IGFuIGFzc29jaWF0aXZlIGFycmF5XG5cdC8vIG92ZXJyaWRlIGlmIFBPU1RpbmcganNvblxuXHRpZiAoIG5ld09wdGlvbnMuanNvbiApIHtcblx0XHRuZXdPcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeSggbmV3T3B0aW9ucy5qc29uICk7XG5cdH1cblxuXHQvLyBhbnkgcGFyYW1zIGRlc3RpbmVkIHRvIGJlY29tZSBxdWVyeSBwYXJhbWV0ZXJzXG5cdGNvbnN0IHBhcmFtcyA9IG5ld09wdGlvbnMucGFyYW1zIHx8IHt9O1xuXHRpZiAoIHBhcmFtcyAmJiAhIGlzRW1wdHkoIHBhcmFtcyApICkge1xuXHRcdGNvbnN0IGZpbHRlcmVkUGFyYW1zID0gcGlja0J5KCBwYXJhbXMsIGlkZW50aXR5ICk7XG5cdFx0Y29uc3QgcCA9IHN0cmluZ2lmeSggZmlsdGVyZWRQYXJhbXMsIHsgYXJyYXlGb3JtYXQ6ICdicmFja2V0JyB9ICk7XG5cdFx0dXJsID0gYCR7IHVybCB9PyR7IHAgfWA7XG5cdH1cblxuXHRjb25zdCBpbml0aWFsSGVhZGVycyA9IFBBVEhfTUFQWyBwYXRoS2V5IF0ubm9uY2Vcblx0XHQ/IHtcblx0XHRcdFx0J1gtV1AtTm9uY2UnOiBQQVRIX01BUFsgcGF0aEtleSBdLm5vbmNlLFxuXHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdCAgfVxuXHRcdDoge307XG5cblx0Y29uc3QgaGVhZGVycyA9IG5ld09wdGlvbnMuaGVhZGVyc1xuXHRcdD8ge1xuXHRcdFx0XHQuLi5pbml0aWFsSGVhZGVycyxcblx0XHRcdFx0Li4ubmV3T3B0aW9ucy5oZWFkZXJzLFxuXHRcdCAgfVxuXHRcdDogaW5pdGlhbEhlYWRlcnM7XG5cblx0Y29uc29sZS5pbmZvKCBgRmV0Y2hpbmcgdXJsOiAkeyB1cmwgfWAgKTtcblx0Y29uc29sZS5pbmZvKCAnd2l0aCBvcHRpb25zJywgeyAuLi5uZXdPcHRpb25zLCBib2R5OiBuZXdPcHRpb25zLmJvZHkgfSApO1xuXHRjb25zb2xlLmluZm8oICdhbmQgaGVhZGVyczogJywgaGVhZGVycyApO1xuXHRjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG5cblx0Ly8gZG8gdGhlIGZldGNoXG5cdHJldHVybiB3aW5kb3dcblx0XHQuZmV0Y2goIHVybCwgeyAuLi5uZXdPcHRpb25zLCBoZWFkZXJzIH0gKVxuXHRcdC50aGVuKCAoIHJlc3BvbnNlICkgPT4ge1xuXHRcdFx0aWYgKCByZXNwb25zZS5vayApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKS50aGVuKCAoIHRleHQgKSA9PiB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cdFx0XHRcdFx0XHRjb25zdCB0aW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuXHRcdFx0XHRcdFx0Y29uc29sZS5pbmZvKFxuXHRcdFx0XHRcdFx0XHRgRGF0YSBmb3IgJHsgcGF0aEtleSB9IGluICR7IHRpbWUgfW1zOmAsXG5cdFx0XHRcdFx0XHRcdGRhdGFcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdGRhdGEsXG5cdFx0XHRcdFx0XHRcdHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHR0b3RhbFBhZ2VzOiByZXNwb25zZS5oZWFkZXJzLmdldChcblx0XHRcdFx0XHRcdFx0XHQneC13cC10b3RhbHBhZ2VzJ1xuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHR0b3RhbFBvc3RzOiByZXNwb25zZS5oZWFkZXJzLmdldCggJ3gtd3AtdG90YWwnICksXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblx0XHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2UgPSB0cmltKFxuXHRcdFx0XHRcdFx0XHRzdHJpcFRhZ3MoIHVuZXNjYXBlSFRNTCggdGV4dCApIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdGBJbnZhbGlkIHNlcnZlciByZXNwb25zZS4gJHsgbWVzc2FnZSB9YFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGVyci5kZXRhaWwgPSB7XG5cdFx0XHRcdFx0XHRcdHVybCxcblx0XHRcdFx0XHRcdFx0ZGF0YTogbWVzc2FnZSxcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdGVycm9yLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHRocm93IGVycjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gd2UgZ2V0IDQweCdzIGFuZCA1MDAncyB3aXRoIHZhbGlkIGpzb25cblx0XHRcdC8vIHdlIGFsc28gc2VlbSB0byBnZXQgZXJyb3JzIHdpdGggYXBwbGljYXRpb24vanNvbiB3aGljaCBhcmUgYWN0dWFsbHkgaHRtbC90ZXh0PyAoc2VlICM5MjQwOClcblx0XHRcdC8vIGllIGV4cGVjdGVkIGVycm9ycyAtIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXNlIGdldCBoYW5kbGVkISFcblx0XHRcdGlmIChcblx0XHRcdFx0c3RhcnRzV2l0aChcblx0XHRcdFx0XHRyZXNwb25zZS5oZWFkZXJzLmdldCggJ0NvbnRlbnQtVHlwZScgKSxcblx0XHRcdFx0XHQnYXBwbGljYXRpb24vanNvbidcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KCkudGhlbiggKCB0ZXh0ICkgPT4ge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRjb25zdCBkYXRhID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXHRcdFx0XHRcdFx0Y29uc29sZS5pbmZvKCBgRGF0YSBmb3IgJHsgcGF0aEtleSB9OmAsIGRhdGEgKTtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdGRhdGEsXG5cdFx0XHRcdFx0XHRcdHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBtZXNzYWdlID0gdHJpbShcblx0XHRcdFx0XHRcdFx0c3RyaXBUYWdzKCB1bmVzY2FwZUhUTUwoIHRleHQgKSApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0Y29uc3QgZXJyID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRgSW52YWxpZCBzZXJ2ZXIgcmVzcG9uc2UuICR7IG1lc3NhZ2UgfWBcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRlcnIuZGV0YWlsID0ge1xuXHRcdFx0XHRcdFx0XHR1cmwsXG5cdFx0XHRcdFx0XHRcdGRhdGE6IG1lc3NhZ2UsXG5cdFx0XHRcdFx0XHRcdHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRlcnJvcixcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGVycm9yXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4oICggZGF0YSApID0+IHtcblx0XHRcdFx0Y29uc3QgbWVzc2FnZSA9IHRyaW0oIHN0cmlwVGFncyggdW5lc2NhcGVIVE1MKCBkYXRhICkgKSApO1xuXHRcdFx0XHRjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0YFVua25vd24gc2VydmVyIHJlc3BvbnNlLiAkeyBtZXNzYWdlIH1gXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGVyci5kZXRhaWwgPSB7XG5cdFx0XHRcdFx0dXJsLFxuXHRcdFx0XHRcdGRhdGE6IG1lc3NhZ2UsXG5cdFx0XHRcdFx0c3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG5cdFx0XHRcdH07XG5cdFx0XHRcdHRocm93IGVycjtcblx0XHRcdH0gKTtcblx0XHR9IClcblx0XHQuY2F0Y2goICggZXJyb3IgKSA9PiB7XG5cdFx0XHRjb25zb2xlLmluZm8oIEpTT04uc3RyaW5naWZ5KCBlcnJvciApICk7XG5cdFx0XHRjb25zb2xlLmluZm8oIGVycm9yLmRldGFpbCApO1xuXHRcdFx0cmV0dXJuIHsgZXJyb3IgfTtcblx0XHR9ICk7XG59XG4iLCIvKipcbiAqIEBmdW5jdGlvbiBzZXR0aW5nVG9nZ2xlXG4gKiBAZGVzY3JpcHRpb24gVGhlIGdlYXIgaWNvbiBmb3IgYW4gYWcgZ3JpZCBpbnN0YW5jZSB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgc2V0dGluZ3MgZmx5b3V0XG4gKi9cblxuZXhwb3J0IGNvbnN0IGZseW91dENvbnRhaW5lciA9IChcblx0aWQgPSAnJyxcblx0Y2xvc2VCdXR0b25DbGFzc2VzID0gJycsXG5cdGNvbnRlbnQgPSAnJyxcblx0ZGVzY3JpcHRpb24gPSAnJyxcblx0ZGlyZWN0aW9uID0gJycsXG5cdHBvc2l0aW9uID0gJycsXG5cdHRpdGxlID0gJycsXG5cdHdyYXBwZXJDbGFzc2VzID0gJydcbikgPT5cblx0YFxuXHQ8YXJ0aWNsZSBpZD1cIiR7IGlkIH1cIiBjbGFzcz1cIiR7IHdyYXBwZXJDbGFzc2VzIH0gZ2Zvcm0tZmx5b3V0LS0keyBkaXJlY3Rpb24gfSBnZm9ybS1mbHlvdXQtLSR7IHBvc2l0aW9uIH1cIj5cblx0XHQ8YnV0dG9uIFxuXHRcdFx0Y2xhc3M9XCIkeyBjbG9zZUJ1dHRvbkNsYXNzZXMgfSBnZm9ybS1idXR0b24gZ2Zvcm0tYnV0dG9uLS1zZWNvbmRhcnkgZ2Zvcm0tYnV0dG9uLS1jaXJjdWxhciBnZm9ybS1idXR0b24tLXNpemUteHNcIlxuXHRcdFx0ZGF0YS1qcz1cImdmb3JtLWZseW91dC1jbG9zZVwiIFxuXHRcdFx0dGl0bGU9XCJDbG9zZSB0aGlzIGZseW91dFwiXG5cdFx0PlxuXHRcdFx0PGkgY2xhc3M9XCJnZm9ybS1idXR0b25fX2ljb24gZ2Zsb3ctaWNvbiBnZmxvdy1pY29uLS1kZWxldGVcIj48L2k+XG5cdFx0PC9idXR0b24+XG5cdFx0JHsgdGl0bGUgfHwgZGVzY3JpcHRpb24gPyAnPGhlYWRlciBjbGFzcz1cImdmb3JtLWZseW91dF9faGVhZFwiPicgOiAnJyB9XG5cdFx0JHsgdGl0bGUgPyBgPGRpdiBjbGFzcz1cImdmb3JtLWZseW91dF9fdGl0bGVcIj4keyB0aXRsZSB9PC9kaXY+YCA6ICcnIH1cblx0XHQkeyBkZXNjcmlwdGlvbiA/IGA8ZGl2IGNsYXNzPVwiZ2Zvcm0tZmx5b3V0X19kZXNjXCI+JHsgZGVzY3JpcHRpb24gfTwvZGl2PmAgOiAnJyB9XG5cdFx0JHsgdGl0bGUgfHwgZGVzY3JpcHRpb24gPyAnPC9oZWFkZXI+JyA6ICcnIH1cblx0XHQ8ZGl2IGNsYXNzPVwiZ2Zvcm0tZmx5b3V0X19ib2R5XCI+JHsgY29udGVudCB9PC9kaXY+XG5cdDwvYXJ0aWNsZT5cblx0YDsgLy8gdG9kbzogbmVlZHMgaTE4blxuIiwiaW1wb3J0ICogYXMgdG9vbHMgZnJvbSAndXRpbHMvdG9vbHMnO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBmb2N1c0xvb3BcbiAqIEBkZXNjcmlwdGlvbiBMb29wIHRocm91Z2ggZm9jdXNhYmxlIGVscyBpbnNpZGUgYSBjb250YWluZXIuIEJvdW5kIHRvIGEga2V5ZG93biBsaXN0ZW5lciB1c3VhbGx5LlxuICpcbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdHJpZ2dlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkVzY2FwZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvY3VzTG9vcChcblx0ZSA9IHt9LFxuXHR0cmlnZ2VyID0gbnVsbCxcblx0Y29udGFpbmVyID0gbnVsbCxcblx0b25Fc2NhcGUgPSAoKSA9PiB7fVxuKSB7XG5cdGlmICggISBjb250YWluZXIgfHwgISB0cmlnZ2VyICkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHQnWW91IG5lZWQgdG8gcGFzcyBhIGNvbnRhaW5lciBhbmQgdHJpZ2dlciBub2RlIHRvIGZvY3VzTG9vcC4nXG5cdFx0KTtcblx0XHRyZXR1cm47XG5cdH1cblx0Ly8gZXNjIGtleSwgcmVmb2N1cyB0aGUgc2V0dGluZ3MgdHJpZ2dlciBpbiB0aGUgZWRpdG9yIHByZXZpZXcgZm9yIHRoZSBhY3RpdmUgZmllbGRcblx0aWYgKCBlLmtleUNvZGUgPT09IDI3ICkge1xuXHRcdHRyaWdnZXIuZm9jdXMoKTtcblx0XHRvbkVzY2FwZSgpO1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBub3QgdGFiIGtleSwgZXhpdFxuXHRpZiAoIGUua2V5Q29kZSAhPT0gOSApIHtcblx0XHRyZXR1cm47XG5cdH1cblx0Ly8gZ2V0IHZpc2libGUgZm9jdXNhYmxlIGl0ZW1zXG5cdGNvbnN0IGZvY3VzYWJsZSA9IHRvb2xzLmdldEZvY3VzYWJsZSggY29udGFpbmVyICk7XG5cdC8vIHN0b3JlIGZpcnN0IGFuZCBsYXN0IHZpc2libGUgaXRlbVxuXHRjb25zdCBmaXJzdEZvY3VzYWJsZUVsID0gZm9jdXNhYmxlWyAwIF07XG5cdGNvbnN0IGxhc3RGb2N1c2FibGVFbCA9IGZvY3VzYWJsZVsgZm9jdXNhYmxlLmxlbmd0aCAtIDEgXTtcblxuXHQvLyBzaGlmdGtleSB3YXMgaW52b2x2ZWQsIHdlJ3JlIGdvaW5nIGJhY2t3YXJkcywgZm9jdXMgbGFzdCBlbCBpZiB3ZSBhcmUgbGVhdmluZyBmaXJzdFxuXHRpZiAoIGUuc2hpZnRLZXkgKSB7XG5cdFx0Lyogc2hpZnQgKyB0YWIgKi9cblx0XHRpZiAoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGZpcnN0Rm9jdXNhYmxlRWwgKSB7XG5cdFx0XHRsYXN0Rm9jdXNhYmxlRWwuZm9jdXMoKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdFx0Ly8gcmVndWxhciB0YWJiaW5nIGRpcmVjdGlvbiwgYnJpbmcgdXMgYmFjayB0byBmaXJzdCBlbCBhdCByZWFjaGluZyBlbmRcblx0fSAvKiB0YWIgKi8gZWxzZSBpZiAoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGxhc3RGb2N1c2FibGVFbCApIHtcblx0XHRmaXJzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG59XG4iLCIvKipcbiAqIEBmdW5jdGlvbiB1bmlxdWVJZFxuICogQGRlc2NyaXB0aW9uIEdlbmVyYXRlIGEgdW5pcXVlIGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuaXF1ZUlkKCBwcmVmaXggPSAnaWQnICkge1xuXHRyZXR1cm4gYCR7IHByZWZpeCB9LSR7IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoIDM2ICkuc3Vic3RyKCAyLCA5ICkgfWA7XG59XG4iLCJpbXBvcnQgKiBhcyB0ZW1wbGF0ZXMgZnJvbSAndGVtcGxhdGVzL2NvbXBvbmVudHMvZmx5b3V0JztcbmltcG9ydCAqIGFzIHRvb2xzIGZyb20gJ3V0aWxzL3Rvb2xzJztcbmltcG9ydCBmb2N1c0xvb3AgZnJvbSAndXRpbHMvYTExeS9mb2N1cy1sb29wJztcbmltcG9ydCB1bmlxdWVJZCBmcm9tICd1dGlscy9kYXRhL3VuaXF1ZS1pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZseW91dCB7XG5cdC8qKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoIG9wdGlvbnMgPSB7fSApIHtcblx0XHRPYmplY3QuYXNzaWduKFxuXHRcdFx0dGhpcyxcblx0XHRcdHtcblx0XHRcdFx0YW5pbWF0aW9uRGVsYXk6IDIxNSwgLy8gdG90YWwgcnVudGltZSBvZiBjbG9zZSBhbmltYXRpb24uIG11c3QgYmUgc3luY2VkIHdpdGggY3NzXG5cdFx0XHRcdGNsb3NlQnV0dG9uQ2xhc3NlczogJ2dmb3JtLWZseW91dF9fY2xvc2UnLCAvLyBjbGFzc2VzIGZvciB0aGUgY2xvc2UgYnV0dG9uXG5cdFx0XHRcdGNvbnRlbnQ6ICcnLCAvLyB0aGUgaHRtbCBjb250ZW50XG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAnJywgLy8gdGhlIG9wdGlvbmFsIGRlc2NyaXB0aW9uIGZvciB0aGUgZmx5b3V0XG5cdFx0XHRcdGRpcmVjdGlvbjogJ3JpZ2h0JywgLy8gZGlyZWN0aW9uIHRvIGZseSBpbiBmcm9tLCBsZWZ0IG9yIHJpZ2h0XG5cdFx0XHRcdGlkOiB1bmlxdWVJZCggJ2ZseW91dCcgKSwgLy8gaWQgZm9yIHRoZSBmbHlvdXRcblx0XHRcdFx0aW5zZXJ0UG9zaXRpb246ICdiZWZvcmVlbmQnLCAvLyBpbnNlcnQgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGFyZ2V0XG5cdFx0XHRcdGxvY2tCb2R5OiBmYWxzZSwgLy8gd2hldGhlciB0byBsb2NrIGJvZHkgc2Nyb2xsIHdoZW4gb3BlblxuXHRcdFx0XHRvbkNsb3NlOiAoKSA9PiB7fSwgLy8gZnVuY3Rpb24gdG8gZmlyZSB3aGVuIGNsb3NlZFxuXHRcdFx0XHRvbk9wZW46ICgpID0+IHt9LCAvLyBmdW5jdGlvbiB0byBmaXJlIHdoZW4gb3BlbmVkXG5cdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLCAvLyBmaXhlZCBvciBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRcdFx0XHRyZW5kZXJPbkluaXQ6IHRydWUsIC8vIHJlbmRlciBvbiBpbml0aWFsaXphdGlvbj9cblx0XHRcdFx0dGFyZ2V0OiAnYm9keScsIC8vIHRoZSBzZWxlY3RvciB0byBhcHBlbmQgdGhlIGZseW91dCB0b1xuXHRcdFx0XHR0aXRsZTogJycsIC8vIHRoZSBvcHRpb25hbCB0aXRsZSBmb3IgdGhlIGZseW91dFxuXHRcdFx0XHR0cmlnZ2VyczogJ1tkYXRhLWpzPVwiZ2Zvcm0tdHJpZ2dlci1mbHlvdXRcIl0nLCAvLyB0aGUgc2VsZWN0b3Jbc10gb2YgdGhlIHRyaWdnZXIgdGhhdCBzaG93cyBpdFxuXHRcdFx0XHR3cmFwcGVyQ2xhc3NlczogJ2dmb3JtLWZseW91dCcsIC8vIGFkZGl0aW9uYWwgY2xhc3NlcyBmb3IgdGhlIHdyYXBwZXJcblx0XHRcdH0sXG5cdFx0XHRvcHRpb25zXG5cdFx0KTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRvcGVuOiBmYWxzZSxcblx0XHR9O1xuXG5cdFx0dGhpcy5mbHlvdXRFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLnRyaWdnZXJFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLmNsb3NlRWxlbWVudCA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMucmVuZGVyT25Jbml0ICkge1xuXHRcdFx0dGhpcy5pbml0KCk7XG5cdFx0fVxuXHR9XG5cblx0c2hvd0ZseW91dCgpIHtcblx0XHR0aGlzLm9uT3BlbigpO1xuXHRcdHRoaXMuZmx5b3V0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCAnYW5pbS1pbi1yZWFkeScgKTtcblx0XHR3aW5kb3cuc2V0VGltZW91dCggKCkgPT4ge1xuXHRcdFx0dGhpcy5mbHlvdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoICdhbmltLWluLWFjdGl2ZScgKTtcblx0XHR9LCAyNSApO1xuXHR9XG5cblx0Y2xvc2VGbHlvdXQgPSAoKSA9PiB7XG5cdFx0aWYgKCAhIHRoaXMuZmx5b3V0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoICdhbmltLWluLWFjdGl2ZScgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmZseW91dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ2FuaW0taW4tcmVhZHknICk7XG5cdFx0dGhpcy5mbHlvdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdhbmltLWluLWFjdGl2ZScgKTtcblx0XHR0aGlzLmZseW91dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2FuaW0tb3V0LXJlYWR5JyApO1xuXG5cdFx0d2luZG93LnNldFRpbWVvdXQoICgpID0+IHtcblx0XHRcdHRoaXMuZmx5b3V0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCAnYW5pbS1vdXQtYWN0aXZlJyApO1xuXHRcdH0sIDI1ICk7XG5cblx0XHR3aW5kb3cuc2V0VGltZW91dCggKCkgPT4ge1xuXHRcdFx0dGhpcy5mbHlvdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdhbmltLW91dC1yZWFkeScgKTtcblx0XHRcdHRoaXMuZmx5b3V0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAnYW5pbS1vdXQtYWN0aXZlJyApO1xuXHRcdH0sIHRoaXMuYW5pbWF0aW9uRGVsYXkgKTtcblxuXHRcdHRoaXMuc3RhdGUub3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMub25DbG9zZSgpO1xuXHR9O1xuXG5cdG1heWJlQ2xvc2VGbHlvdXQgPSAoIGUgKSA9PiB7XG5cdFx0aWYgKCBlLmRldGFpbD8uYWN0aXZlSWQgPT09IHRoaXMuaWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5mbHlvdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdhbmltLWluLXJlYWR5JyApO1xuXHRcdHRoaXMuZmx5b3V0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAnYW5pbS1pbi1hY3RpdmUnICk7XG5cdFx0dGhpcy5mbHlvdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdhbmltLW91dC1yZWFkeScgKTtcblx0XHR0aGlzLmZseW91dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ2FuaW0tb3V0LWFjdGl2ZScgKTtcblx0XHR0aGlzLnN0YXRlLm9wZW4gPSBmYWxzZTtcblx0fTtcblxuXHRoYW5kbGVLZXlFdmVudHMgPSAoIGUgKSA9PlxuXHRcdGZvY3VzTG9vcChcblx0XHRcdGUsXG5cdFx0XHR0aGlzLnRyaWdnZXJFbGVtZW50LFxuXHRcdFx0dGhpcy5mbHlvdXRFbGVtZW50LFxuXHRcdFx0dGhpcy5jbG9zZUZseW91dFxuXHRcdCk7XG5cblx0aGFuZGxlVHJpZ2dlckNsaWNrID0gKCBlICkgPT4ge1xuXHRcdHRoaXMudHJpZ2dlckVsZW1lbnQgPSBlLnRhcmdldDtcblx0XHRpZiAoIHRoaXMuc3RhdGUub3BlbiApIHtcblx0XHRcdHRoaXMuY2xvc2VGbHlvdXQoKTtcblx0XHRcdHRoaXMudHJpZ2dlckVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdHRoaXMuc3RhdGUub3BlbiA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNob3dGbHlvdXQoKTtcblx0XHRcdHRoaXMuY2xvc2VFbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR0aGlzLnN0YXRlLm9wZW4gPSB0cnVlO1xuXHRcdH1cblx0fTtcblxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggdGhpcy50YXJnZXQgKVsgMCBdO1xuXHRcdGlmICggISB0YXJnZXQgKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRgRmx5b3V0IGNvdWxkIG5vdCByZW5kZXIgYXMgJHsgdGhpcy50YXJnZXQgfSBjb3VsZCBub3QgYmUgZm91bmQuYFxuXHRcdFx0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0YXJnZXQuaW5zZXJ0QWRqYWNlbnRIVE1MKFxuXHRcdFx0dGhpcy5pbnNlcnRQb3NpdGlvbixcblx0XHRcdHRlbXBsYXRlcy5mbHlvdXRDb250YWluZXIoXG5cdFx0XHRcdHRoaXMuaWQsXG5cdFx0XHRcdHRoaXMuY2xvc2VCdXR0b25DbGFzc2VzLFxuXHRcdFx0XHR0aGlzLmNvbnRlbnQsXG5cdFx0XHRcdHRoaXMuZGVzY3JpcHRpb24sXG5cdFx0XHRcdHRoaXMuZGlyZWN0aW9uLFxuXHRcdFx0XHR0aGlzLnBvc2l0aW9uLFxuXHRcdFx0XHR0aGlzLnRpdGxlLFxuXHRcdFx0XHR0aGlzLndyYXBwZXJDbGFzc2VzXG5cdFx0XHQpXG5cdFx0KTtcblxuXHRcdHRoaXMuZmx5b3V0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCB0aGlzLmlkICk7XG5cdFx0dGhpcy5jbG9zZUVsZW1lbnQgPSB0b29scy5nZXROb2Rlcyhcblx0XHRcdCdnZm9ybS1mbHlvdXQtY2xvc2UnLFxuXHRcdFx0ZmFsc2UsXG5cdFx0XHR0aGlzLmZseW91dEVsZW1lbnRcblx0XHQpWyAwIF07XG5cblx0XHRjb25zb2xlLmluZm8oXG5cdFx0XHRgR3Jhdml0eSBGbG93IENvbW1vbjogSW5pdGlhbGl6ZWQgZmx5b3V0IGNvbXBvbmVudCBvbiAkeyB0aGlzLnRhcmdldCB9LmBcblx0XHQpO1xuXHR9XG5cblx0YmluZEV2ZW50cygpIHtcblx0XHR0aGlzLmZseW91dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleUV2ZW50cyApO1xuXHRcdHRoaXMuY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuY2xvc2VGbHlvdXQgKTtcblx0XHR0b29sc1xuXHRcdFx0LmdldE5vZGVzKCB0aGlzLnRyaWdnZXJzLCB0cnVlLCBkb2N1bWVudCwgdHJ1ZSApXG5cdFx0XHQuZm9yRWFjaCggKCB0cmlnZ2VyICkgPT5cblx0XHRcdFx0dHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVRyaWdnZXJDbGljayApXG5cdFx0XHQpO1xuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcblx0XHRcdCdnZm9ybS9jbG9zZS1mbHlvdXRzJyxcblx0XHRcdHRoaXMubWF5YmVDbG9zZUZseW91dFxuXHRcdCk7XG5cdH1cblxuXHRpbml0KCkge1xuXHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0dGhpcy5iaW5kRXZlbnRzKCk7XG5cdH1cbn1cbiIsImV4cG9ydCBjb25zdCBJTkJPWF9ERUZBVUxUX0lEID0gJ2luYm94X2RlZmF1bHQnO1xuIiwiLyoqXG4gKiBAZnVuY3Rpb24gc2V0dGluZ1RvZ2dsZVxuICogQGRlc2NyaXB0aW9uIFRoZSBnZWFyIGljb24gZm9yIGFuIGFnIGdyaWQgaW5zdGFuY2UgdGhhdCB3aWxsIHRyaWdnZXIgdGhlIHNldHRpbmdzIGZseW91dFxuICovXG5cbmV4cG9ydCBjb25zdCBzZXR0aW5nVG9nZ2xlID0gKCB0cmlnZ2VySWQgPSAnZ3JpZC1zZXR0aW5ncycsIHRpdGxlID0gJycgKSA9PlxuXHRgXG5cdDxidXR0b24gXG5cdFx0Y2xhc3M9XCJnZmxvdy1ncmlkX19idXR0b24gZ2Zsb3ctZ3JpZF9fYnV0dG9uLS1zZXR0aW5ncyBnZmxvdy1pY29uIGdmbG93LWljb24tLWNvZ1wiIFxuXHRcdGRhdGEtanM9XCIkeyB0cmlnZ2VySWQgfVwiIFxuXHRcdHRpdGxlPVwiJHsgdGl0bGUgfVwiXG5cdD48L2J1dHRvbj5cblx0YDtcbiIsIi8qKlxuICogSW5wdXQgdGVtcGxhdGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xhc3Nlc1xuICogQHBhcmFtIHtzdHJpbmd9IGpzQXR0cmlidXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGxhY2Vob2xkZXJcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKFxuXHR0eXBlID0gJ3RleHQnLFxuXHRpZCA9ICcnLFxuXHRuYW1lID0gJycsXG5cdHZhbHVlID0gJycsXG5cdGNsYXNzZXMgPSAnZ2Zvcm0taW5wdXQnLFxuXHRqc0F0dHJpYnV0ZSA9ICdnZm9ybS1pbnB1dCcsXG5cdHBsYWNlaG9sZGVyID0gJydcbikge1xuXHRyZXR1cm4gYFxuXHQ8aW5wdXQgXG5cdFx0Y2xhc3M9XCIkeyBjbGFzc2VzIH1cIiBcblx0XHR2YWx1ZT1cIiR7IHZhbHVlIH1cIiBcblx0XHR0eXBlPVwiJHsgdHlwZSB9XCIgXG5cdFx0ZGF0YS1qcz1cIiR7IGpzQXR0cmlidXRlIH1cIlxuXHRcdCR7IHBsYWNlaG9sZGVyID8gYHBsYWNlaG9sZGVyPVwiJHsgcGxhY2Vob2xkZXIgfVwiYCA6ICcnIH1cblx0XHQkeyBpZCA/IGBpZD1cIiR7IGlkIH1cImAgOiAnJyB9XG5cdFx0JHsgbmFtZSA/IGBuYW1lPVwiJHsgbmFtZSB9XCJgIDogJycgfVxuXHQvPlxuXHRgO1xufVxuIiwiLyoqXG4gKiBUb2dnbGUgdGVtcGxhdGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNhYmxlZExhYmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5hYmxlZExhYmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gd3JhcHBlckNsYXNzZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc0F0dHJpYnV0ZVxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoXG5cdGlkID0gJycsXG5cdG5hbWUgPSAnJyxcblx0Y2hlY2tlZCA9IGZhbHNlLFxuXHRkaXNhYmxlZExhYmVsID0gJycsXG5cdGVuYWJsZWRMYWJlbCA9ICcnLFxuXHR3cmFwcGVyQ2xhc3NlcyA9ICdnZm9ybS1maWVsZF9fdG9nZ2xlJyxcblx0anNBdHRyaWJ1dGUgPSAnZ2Zvcm0tdG9nZ2xlJ1xuKSB7XG5cdHJldHVybiBgXG5cdDxkaXYgY2xhc3M9XCIkeyB3cmFwcGVyQ2xhc3NlcyB9XCI+XG5cdFx0PHNwYW4gY2xhc3M9XCJnZm9ybS1zZXR0aW5ncy1pbnB1dF9fY29udGFpbmVyXCI+XG5cdFx0XHQ8aW5wdXQgXG5cdFx0XHRcdHR5cGU9XCJjaGVja2JveFwiIFxuXHRcdFx0XHRjbGFzcz1cImdmb3JtLWZpZWxkX190b2dnbGUtaW5wdXRcIiBcblx0XHRcdFx0ZGF0YS1qcz1cIiR7IGpzQXR0cmlidXRlIH1cIiBcblx0XHRcdFx0JHsgaWQgPyBgaWQ9JHsgaWQgfWAgOiAnJyB9XG5cdFx0XHRcdCR7IG5hbWUgPyBgbmFtZT0keyBuYW1lIH1gIDogJycgfVxuXHRcdFx0XHQkeyBjaGVja2VkID8gJ2NoZWNrZWQnIDogJycgfVxuXHRcdFx0PlxuXHRcdFx0PGxhYmVsIGNsYXNzPVwiZ2Zvcm0tZmllbGRfX3RvZ2dsZS1jb250YWluZXJcIiAkeyBpZCA/IGBmb3I9JHsgaWQgfWAgOiAnJyB9PlxuXHRcdFx0XHQ8c3BhbiBcblx0XHRcdFx0XHRjbGFzcz1cImdmb3JtLWZpZWxkX190b2dnbGUtc3dpdGNoLXRleHQgc2NyZWVuLXJlYWRlci10ZXh0XCJcblx0XHRcdFx0XHRkYXRhLWRpc2FibGVkLXRleHQ9XCIkeyBkaXNhYmxlZExhYmVsIH1cIlxuXHRcdFx0XHRcdGRhdGEtZW5hYmxlZC10ZXh0PVwiJHsgZW5hYmxlZExhYmVsIH1cIlxuXHRcdFx0XHQ+JHsgY2hlY2tlZCA/IGVuYWJsZWRMYWJlbCA6IGRpc2FibGVkTGFiZWwgfTwvc3Bhbj5cblx0XHRcdFx0PHNwYW4gY2xhc3M9XCJnZm9ybS1maWVsZF9fdG9nZ2xlLXN3aXRjaFwiPjwvc3Bhbj5cblx0XHRcdDwvbGFiZWw+XG5cdFx0PC9zcGFuPlxuXHQ8L2Rpdj5cblx0YDtcbn1cbiIsImltcG9ydCB1bmlxdWVJZCBmcm9tICd1dGlscy9kYXRhL3VuaXF1ZS1pZCc7XG5pbXBvcnQgaW5wdXQgZnJvbSAndGVtcGxhdGVzL2NvbXBvbmVudHMvaW5wdXQnO1xuaW1wb3J0IHRvZ2dsZSBmcm9tICd0ZW1wbGF0ZXMvY29tcG9uZW50cy90b2dnbGUnO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBzZXR0aW5nc1xuICogQGRlc2NyaXB0aW9uIFRoZSBjb250ZW50IGZvciB0aGUgaW5ib3ggc2V0dGluZ3MgZmx5b3V0XG4gKi9cblxuZXhwb3J0IGNvbnN0IHNldHRpbmdzID0gKCBpZCA9IHVuaXF1ZUlkKCAnaW5ib3gtc2V0dGluZ3MtJyApICkgPT5cblx0YFxuXHQ8c3BhbiBjbGFzcz1cImdmb3JtLWZseW91dF9fc2V0dGluZy1sYWJlbFwiPlxuXHRcdEVuYWJsZSBQdXNoIE5vdGlmaWNhdGlvbnNcblx0PC9zcGFuPlxuXHQ8c3BhbiBjbGFzcz1cImdmb3JtLWZseW91dF9fc2V0dGluZy1kZXNjXCI+XG5cdFx0WW91IHdpbGwgaGF2ZSB0byBhbGxvdyBwdXNoIG5vdGlmaWNhdGlvbnMgZm9yIHRoaXMgZG9tYWluIGFuZCBicm93c2VyIHRvIGVuYWJsZSB0aGlzIGZlYXR1cmUuIElmIHlvdSBoYXZlbid0IGFscmVhZHksXG5cdFx0eW91ciBicm93c2VyIHdpbGwgYXNrIHlvdSB0byBlbmFibGUgdGhlbSBvbmUgdGltZS5cblx0PC9zcGFuPlxuXHQkeyB0b2dnbGUoXG5cdFx0aWQsXG5cdFx0aWQsXG5cdFx0ZmFsc2UsXG5cdFx0J2Rpc2FibGVkJyxcblx0XHQnZW5hYmxlZCcsXG5cdFx0J2dmb3JtLWZpZWxkX190b2dnbGUgZ2Zvcm0tZmx5b3V0X19zZXR0aW5nJyxcblx0XHQnaW5ib3gtc2V0dGluZydcblx0KSB9XG5cdGA7XG5cbi8qKlxuICogQGZ1bmN0aW9uIGhlYWRlclxuICogQGRlc2NyaXB0aW9uIFRoZSBpbmJveCBoZWFkZXIgd2l0aCBzZWFyY2guXG4gKi9cblxuZXhwb3J0IGNvbnN0IGhlYWRlciA9ICggc2VhcmNoSWQgPSB1bmlxdWVJZCggJ2luYm94LWhlYWRlci0nICkgKSA9PlxuXHRgXG5cdDxkaXYgY2xhc3M9XCJnZmxvdy1ncmlkX19oZWFkZXJcIj5cblx0XHQkeyBpbnB1dChcblx0XHRcdCdzZWFyY2gnLFxuXHRcdFx0c2VhcmNoSWQsXG5cdFx0XHQnJyxcblx0XHRcdCcnLFxuXHRcdFx0J2dmb3JtLWlucHV0IGdmbG93LWluYm94X19zZWFyY2gnLFxuXHRcdFx0J2dmbG93LWluYm94LXNlYXJjaCcsXG5cdFx0XHQnU2VhcmNoIEluYm94J1xuXHRcdCkgfVxuXHQ8L2Rpdj5cblx0YDtcbiIsIi8qKlxuICogSW5ib3hcbiAqXG4gKiBJbml0aWFsaXplcyB0aGUgaW5ib3ggY29tcG9uZW50XG4gKi9cblxuaW1wb3J0IHsgR3JpZCB9IGZyb20gJ2FnLWdyaWQtY29tbXVuaXR5JztcbmltcG9ydCBkZWxlZ2F0ZSBmcm9tICdkZWxlZ2F0ZSc7XG5pbXBvcnQgZ2Zsb3dDb25maWcgZnJvbSAnZ2Zsb3ctY29uZmlnJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3V0aWxzL3JlcXVlc3QnO1xuXG5pbXBvcnQgRmx5b3V0IGZyb20gJ2NvbW1vbi9jb21wb25lbnRzL2ZseW91dCc7XG5pbXBvcnQgeyBJTkJPWF9ERUZBVUxUX0lEIH0gZnJvbSAnY29tbW9uL2NvbmZpZy9jb25zdGFudHMnO1xuaW1wb3J0ICogYXMgdG9vbHMgZnJvbSAndXRpbHMvdG9vbHMnO1xuaW1wb3J0ICogYXMgZ3JpZFRlbXBsYXRlcyBmcm9tICd0ZW1wbGF0ZXMvY29tcG9uZW50cy9ncmlkJztcbmltcG9ydCAqIGFzIGluYm94VGVtcGxhdGVzIGZyb20gJ3RlbXBsYXRlcy9ncmlkcy9pbmJveCc7XG5cbmNvbnN0IGVsID0ge307XG5jb25zdCBpbnN0YW5jZXMgPSB7XG5cdGdyaWRzOiB7fSxcblx0Z3JpZE9wdGlvbnM6IHt9LFxuXHRmbHlvdXRzOiB7fSxcbn07XG5jb25zdCBnbG9iYWxPcHRpb25zID0ge1xuXHRhbmltYXRlUm93czogZmFsc2UsXG59O1xuY29uc3QgZGF0YSA9IGdmbG93Q29uZmlnPy5ncmlkcyB8fCB7fTtcbmNvbnN0IGNvbmZpZyA9IGdmbG93Q29uZmlnIHx8IHt9O1xuY29uc3QgZGVmYXVsdEdyaWRJZCA9IE9iamVjdC5rZXlzKCBkYXRhIClbIDAgXSB8fCBJTkJPWF9ERUZBVUxUX0lEO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBpbnRDb21wYXJhdG9yXG4gKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gdXNlZCBieSBhZyBncmlkIHdoZW4gc29ydGluZyBudW1lcmljIGNvbHVtbnNcbiAqXG4gKiBAc2luY2UgMi43LjRcbiAqXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgVGhlIGFyZ3Mgc2VudCB0byB0aGlzIG1ldGhvZCwgd2hpY2ggYXJlXG4gKiAgICAgICAgICAgICAgICAgICAge1N0cmluZ30gIFRoZSBjdXJyZW50IGNvbHVtbiBvYmplY3QuXG4gKiAgICAgICAgICAgICAgICAgICAge1N0cmluZ30gIFRoZSBmaXJzdCB2YWx1ZSB0byBjb21wYXJlLlxuICogICAgICAgICAgICAgICAgICAgIHtTdHJpbmd9ICBUaGUgc2Vjb25kIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiAgICAgICAgICAgICAgICAgICAge09iamVjdH0gIFRoZSBub2RlIHJlcHJlc2VudGluZyB0aGUgZmlyc3Qgcm93LlxuICogICAgICAgICAgICAgICAgICAgIHtPYmplY3R9ICBUaGUgbm9kZSByZXByZXNlbnRpbmcgdGhlIHNlY29uZCByb3cuXG4gKiAgICAgICAgICAgICAgICAgICAge0Jvb2xlYW59IFdoZXRoZXIgdGhlIGN1cnJlbnQgc29ydCBpcyBpbnZlcnRlZC5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEVpdGhlciAtMSwgMCwgb3IgMS5cbiAqL1xuY29uc3QgaW50Q29tcGFyYXRvciA9ICggLi4uYXJncyApID0+IHtcblx0Y29uc3QgdmFsdWUxID0gYXJnc1sgMyBdLmRhdGFbIGFyZ3NbIDAgXS5zb3J0S2V5IF0gPz8gYXJnc1sgMSBdO1xuXHRjb25zdCB2YWx1ZTIgPSBhcmdzWyA0IF0uZGF0YVsgYXJnc1sgMCBdLnNvcnRLZXkgXSA/PyBhcmdzWyAyIF07XG5cblx0cmV0dXJuIE1hdGguc2lnbiggcGFyc2VJbnQoIHZhbHVlMSApIC0gcGFyc2VJbnQoIHZhbHVlMiApICk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBhcHBseUNvbHVtbkNvbXBhcmF0b3JcbiAqIEBkZXNjcmlwdGlvbiBBcHBseSBhIGNvbXBhcmF0b3IgYmFzZWQgb24gY29sdW1uIHR5cGUuIFN0cmluZyBvciBpbnQuXG4gKlxuICogQHNpbmNlIDIuNy40XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbHVtblxuICogQHJldHVybiB7Kn1cbiAqL1xuXG5jb25zdCBhcHBseUNvbHVtbkNvbXBhcmF0b3IgPSAoIGNvbHVtbiApID0+IHtcblx0aWYgKCBjb2x1bW4uY29tcGFyZVR5cGUgPT09ICdzdHJpbmcnICkge1xuXHRcdHJldHVybiBjb2x1bW47XG5cdH1cblxuXHRjb2x1bW4uY29tcGFyYXRvciA9IGludENvbXBhcmF0b3IuYmluZCggbnVsbCwgY29sdW1uICk7XG5cblx0cmV0dXJuIGNvbHVtbjtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldEdyaWRJZFxuICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGdyaWQgaWQgdXNlZCB0byBtYXRjaCBvcHRpb25zIHRvIGluc3RhbmNlcyBpbiB0aGUgZG9tLlxuICpcbiAqIEBzaW5jZSAyLjcuNFxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGdyaWQgVGhlIHdyYXBwaW5nIGNvbnRhaW5lciB0aGUgZ3JpZCBpcyBpbmplY3RlZCB0b1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbmV4cG9ydCBjb25zdCBnZXRHcmlkSWQgPSAoIGdyaWQgKSA9PiBncmlkLmRhdGFzZXQuZ3JpZElkIHx8IElOQk9YX0RFRkFVTFRfSUQ7XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldEdyaWRPcHRpb25zXG4gKiBAZGVzY3JpcHRpb24gTWVyZ2VzIGdsb2JhbCBvcHRpb25zIHdpdGggdGhlIGluc3RhbmNlIHNwZWNpZmljIG9wdGlvbnMgZm9yIGEgZ3JpZCBpbnN0YW5jZS5cbiAqXG4gKiBAc2luY2UgMi43LjRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZ3JpZElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGdyaWQgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZXhwb3J0IGNvbnN0IGdldEdyaWRPcHRpb25zID0gKCBncmlkSWQgPSBJTkJPWF9ERUZBVUxUX0lEICkgPT5cblx0T2JqZWN0LmFzc2lnbigge30sIGRhdGFbIGdyaWRJZCBdLmdyaWRfb3B0aW9ucywgZ2xvYmFsT3B0aW9ucyApO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBpbml0aWFsaXplR3JpZFxuICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIGFuIGFnIGdyaWQgaW5zdGFuY2Ugb24gdGhlIHBhc3NlZCBjb250YWluaW5nIGRpdi5cbiAqXG4gKiBAc2luY2UgMi43LjRcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBncmlkIFRoZSBncmlkIGNvbnRhaW5lci5cbiAqL1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUdyaWQgPSAoIGdyaWQgKSA9PiB7XG5cdGNvbnN0IGdyaWRJZCA9IGdldEdyaWRJZCggZ3JpZCApO1xuXG5cdGlmICggISBkYXRhWyBncmlkSWQgXT8uZ3JpZF9vcHRpb25zICkge1xuXHRcdGNvbnNvbGUuZXJyb3IoIGBDYW50IGZpbmQgaW5ib3ggb3B0aW9ucyBmb3IgZ3JpZCBpZDogJHsgZ3JpZElkIH1gICk7XG5cdH1cblxuXHRpbnN0YW5jZXMuZ3JpZE9wdGlvbnNbIGdyaWRJZCBdID0gZ2V0R3JpZE9wdGlvbnMoIGdyaWRJZCApO1xuXG5cdGluc3RhbmNlcy5ncmlkT3B0aW9uc1sgZ3JpZElkIF0uZ2V0Um93Tm9kZUlkID0gKCByb3cgKSA9PiB7XG5cdFx0cmV0dXJuIHBhcnNlSW50KCByb3cuaWQgKTtcblx0fTtcblxuXHRpbnN0YW5jZXMuZ3JpZE9wdGlvbnNbIGdyaWRJZCBdLmNvbHVtbkRlZnMuZm9yRWFjaCggKCBjb2x1bW4sIGluZGV4ICkgPT4ge1xuXHRcdGluc3RhbmNlcy5ncmlkT3B0aW9uc1sgZ3JpZElkIF0uY29sdW1uRGVmc1tcblx0XHRcdGluZGV4XG5cdFx0XSA9IGFwcGx5Q29sdW1uQ29tcGFyYXRvciggY29sdW1uICk7XG5cdH0gKTtcblxuXHRpbnN0YW5jZXMuZ3JpZHNbIGdyaWRJZCBdID0gbmV3IEdyaWQoXG5cdFx0Z3JpZCxcblx0XHRpbnN0YW5jZXMuZ3JpZE9wdGlvbnNbIGdyaWRJZCBdXG5cdCk7XG5cdGluaXRpYWxpemVTZWFyY2goIGdyaWQgKTtcblx0aW5pdGlhbGl6ZVNldHRpbmdzKCBncmlkLCBncmlkSWQgKTtcblxuXHRjb25zdCBzb3J0Q29sID0gY29uZmlnPy5kZWZhdWx0X3NvcnRfY29sIHx8ICdub25lJztcblx0Y29uc3Qgc29ydERpciA9IGNvbmZpZz8uZGVmYXVsdF9zb3J0X2RpciB8fCAnYXNjJztcblxuXHRpZiAoIHNvcnRDb2wgPT09ICdub25lJyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBncmlkQ29sID0gaW5zdGFuY2VzLmdyaWRPcHRpb25zWyBncmlkSWQgXS5jb2x1bW5BcGkuZ2V0Q29sdW1uKFxuXHRcdHNvcnRDb2xcblx0KTtcblxuXHRpZiAoICEgZ3JpZENvbCApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpbnN0YW5jZXMuZ3JpZE9wdGlvbnNbIGdyaWRJZCBdLmNvbHVtbkFwaS5hcHBseUNvbHVtblN0YXRlKCB7XG5cdFx0c3RhdGU6IFtcblx0XHRcdHtcblx0XHRcdFx0Y29sSWQ6IHNvcnRDb2wsXG5cdFx0XHRcdHNvcnQ6IHNvcnREaXIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0gKTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGluaXRpYWxpemVTZXR0aW5nc1xuICogQGRlc2NyaXB0aW9uIEluamVjdCB0aGUgc2V0dGluZ3MgdHJpZ2dlciBhbmQgaW5zdGFudGlhdGUgdGhlIGZseW91dFxuICovXG5cbmNvbnN0IGluaXRpYWxpemVTZXR0aW5ncyA9ICggZ3JpZCwgZ3JpZElkICkgPT4ge1xuXHRncmlkLmluc2VydEFkamFjZW50SFRNTChcblx0XHQnYWZ0ZXJiZWdpbicsXG5cdFx0Z3JpZFRlbXBsYXRlcy5zZXR0aW5nVG9nZ2xlKFxuXHRcdFx0J2luYm94LXNldHRpbmdzJyxcblx0XHRcdCdUb2dnbGUgc2V0dGluZ3MgZm9yIHRoaXMgdGFibGUnIC8vIHRvZG86IG5lZWRzIGkxOG5cblx0XHQpXG5cdCk7XG5cblx0aW5zdGFuY2VzLmZseW91dHNbIGdyaWRJZCBdID0gbmV3IEZseW91dCgge1xuXHRcdGNvbnRlbnQ6IGluYm94VGVtcGxhdGVzLnNldHRpbmdzKCksXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdFx0dGFyZ2V0OiAnLmdmbG93LWluYm94LmdmbG93LWdyaWQnLFxuXHRcdHRpdGxlOiAnSW5ib3ggU2V0dGluZ3MnLFxuXHRcdHRyaWdnZXJzOiAnW2RhdGEtanM9XCJpbmJveC1zZXR0aW5nc1wiXScsXG5cdFx0d3JhcHBlckNsYXNzZXM6ICdnZm9ybS1mbHlvdXQgZ2Zvcm0tZmx5b3V0LS1pbmJveC1zZXR0aW5ncycsXG5cdH0gKTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGluaXRpYWxpemVTZWFyY2hcbiAqIEBkZXNjcmlwdGlvbiBJbmplY3QgdGhlIHNlYXJjaCBpbnB1dCBmb3IgdGhlIHdob2xlIHRhYmxlIGluc3RhbmNlLlxuICovXG5cbmNvbnN0IGluaXRpYWxpemVTZWFyY2ggPSAoIGdyaWQgKSA9PiB7XG5cdGdyaWQuaW5zZXJ0QWRqYWNlbnRIVE1MKCAnYWZ0ZXJiZWdpbicsIGluYm94VGVtcGxhdGVzLmhlYWRlcigpICk7XG59O1xuXG5jb25zdCBnZXRJZHNGcm9tTW9kZWwgPSAoKSA9PiB7XG5cdGNvbnN0IGlkcyA9IFtdO1xuXHRpbnN0YW5jZXMuZ3JpZE9wdGlvbnNbIGRlZmF1bHRHcmlkSWQgXS5hcGkuZm9yRWFjaE5vZGUoICggbm9kZSApID0+XG5cdFx0aWRzLnB1c2goIG5vZGUuZGF0YS5pZCApXG5cdCk7XG5cdHJldHVybiBpZHM7XG59O1xuXG5jb25zdCByZWZyZXNoR3JpZCA9IGFzeW5jICgpID0+IHtcblx0Y29uc3QgY3VycmVudF9pZHMgPSBnZXRJZHNGcm9tTW9kZWwoKTtcblx0Y29uc3QgZm9ybURhdGEgPSBuZXcgd2luZG93LkZvcm1EYXRhKCk7XG5cblx0Y3VycmVudF9pZHMuZm9yRWFjaCggKCBpdGVtICkgPT4gZm9ybURhdGEuYXBwZW5kKCAnY3VycmVudF9pZHNbXScsIGl0ZW0gKSApO1xuXHRmb3JtRGF0YS5hcHBlbmQoXG5cdFx0J2dmbG93X2FjY2Vzc190b2tlbicsXG5cdFx0ZGF0YVsgZGVmYXVsdEdyaWRJZCBdPy5jdXJyZW50X3VzZXJfdG9rZW4gfHwgbnVsbFxuXHQpO1xuXG5cdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdCggJ3JlZnJlc2hfaW5ib3hfaXRlbXMnLCB7XG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0Ym9keToge1xuXHRcdFx0Z2Zsb3dfYWNjZXNzX3Rva2VuOlxuXHRcdFx0XHRkYXRhWyBkZWZhdWx0R3JpZElkIF0/LmN1cnJlbnRfdXNlcl90b2tlbiB8fCBudWxsLFxuXHRcdFx0Y3VycmVudF9pZHMsXG5cdFx0fSxcblx0fSApO1xuXG5cdGluc3RhbmNlcy5ncmlkT3B0aW9uc1sgZGVmYXVsdEdyaWRJZCBdLmFwaS5hcHBseVRyYW5zYWN0aW9uKFxuXHRcdHJlc3BvbnNlLmRhdGFcblx0KTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGhhbmRsZVNldHRpbmdzQ2hhbmdlXG4gKiBAZGVzY3JpcHRpb24gSGFuZGxlIGNoYW5nZXMgdG8gdGhlIHNldHRpbmdzIGZvciB0aGUgaW5ib3hcbiAqL1xuXG5jb25zdCBoYW5kbGVTZXR0aW5nc0NoYW5nZSA9ICggZSApID0+IHtcblx0Ly8gc3dpdGNoIGJhc2VkIG9uIHNldHRpbmcgbmFtZSB0byBoYW5kbGUgY2FzZXMsIG5hbWUgaXMgYWxzbyB2YWx1ZSBzdG9yZWQgYW5kIHBhc3NlZCBpbiBvbiBpbml0IGZyb20gcGhwIGluIGNvbmZpZ1xuXHRjb25zb2xlLmxvZyggZS5kZWxlZ2F0ZVRhcmdldC5uYW1lICk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBhcHBseVNlYXJjaFxuICogQGRlc2NyaXB0aW9uIEFwcGx5IGEgc2VhcmNoIHRlcm0gdG8gdGhlIGdyaWQuXG4gKi9cblxuY29uc3QgYXBwbHlTZWFyY2ggPSAoIGUgKSA9PiB7XG5cdGNvbnN0IGlucHV0ID0gZS5kZWxlZ2F0ZVRhcmdldDtcblx0Y29uc3QgZ3JpZENvbnRhaW5lciA9IHRvb2xzLmNsb3Nlc3QoIGlucHV0LCAnW2RhdGEtanM9XCJnZmxvdy1pbmJveFwiXScgKTtcblx0Y29uc3QgZ3JpZElkID0gZ2V0R3JpZElkKCBncmlkQ29udGFpbmVyICk7XG5cdGluc3RhbmNlcy5ncmlkT3B0aW9uc1sgZ3JpZElkIF0uYXBpLnNldFF1aWNrRmlsdGVyKCBpbnB1dC52YWx1ZSApO1xuXHRjb25zb2xlLmxvZyggJ2hpJyApO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gaW5pdGlhbGl6ZUdyaWRzXG4gKiBAZGVzY3JpcHRpb24gSXRlcmF0ZSBvdmVyIGFsbCBmb3VuZCBncmlkcyBhbmQgaW5pdGlhbGl6ZS5cbiAqL1xuXG5jb25zdCBpbml0aWFsaXplR3JpZHMgPSAoKSA9PiB7XG5cdGVsLmNvbnRhaW5lcnMuZm9yRWFjaCggKCBncmlkICkgPT4gaW5pdGlhbGl6ZUdyaWQoIGdyaWQgKSApO1xufTtcblxuY29uc3QgYmluZEV2ZW50cyA9ICgpID0+IHtcblx0Y29uc3QgcmVmcmVzaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICdbZGF0YS1qcz1cInJlZnJlc2hfaW5ib3hcIl0nICk7XG5cdHJlZnJlc2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgZnVuY3Rpb24gKCBlICkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRyZWZyZXNoR3JpZCgpO1xuXHR9ICk7XG5cblx0ZGVsZWdhdGUoXG5cdFx0ZG9jdW1lbnQuYm9keSxcblx0XHQnW2RhdGEtanM9XCJpbmJveC1zZXR0aW5nXCJdJyxcblx0XHQnY2hhbmdlJyxcblx0XHRoYW5kbGVTZXR0aW5nc0NoYW5nZVxuXHQpO1xuXG5cdGRlbGVnYXRlKFxuXHRcdGRvY3VtZW50LmJvZHksXG5cdFx0J1tkYXRhLWpzPVwiZ2Zsb3ctaW5ib3gtc2VhcmNoXCJdJyxcblx0XHQna2V5dXAnLFxuXHRcdGFwcGx5U2VhcmNoXG5cdCk7XG59O1xuXG5jb25zdCBpbml0ID0gKCBjb250YWluZXJzICkgPT4ge1xuXHRlbC5jb250YWluZXJzID0gY29udGFpbmVycztcblxuXHRpbml0aWFsaXplR3JpZHMoKTtcblx0YmluZEV2ZW50cygpO1xuXG5cdGNvbnNvbGUuaW5mbyggJ0dyYXZpdHkgRmxvdyBDb21tb246IEluaXRpYWxpemVkIGluYm94IGNvbXBvbmVudHMuJyApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/common/grids/inbox.js\n");

/***/ })

}]);