/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgravityflow"] = self["webpackChunkgravityflow"] || []).push([["common-inbox"],{

/***/ "./src/js/common/grids/inbox.js":
/*!***************************************************!*\
  !*** ./src/js/common/grids/inbox.js + 11 modules ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ inbox)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(\"./node_modules/@babel/runtime/regenerator/index.js\");\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/ag-grid-community/dist/ag-grid-community.cjs.js\nvar ag_grid_community_cjs = __webpack_require__(\"./node_modules/ag-grid-community/dist/ag-grid-community.cjs.js\");\n// EXTERNAL MODULE: ./node_modules/delegate/src/delegate.js\nvar delegate = __webpack_require__(\"./node_modules/delegate/src/delegate.js\");\nvar delegate_default = /*#__PURE__*/__webpack_require__.n(delegate);\n// EXTERNAL MODULE: external \"gflow_config\"\nvar external_gflow_config_ = __webpack_require__(\"gflow-config\");\nvar external_gflow_config_default = /*#__PURE__*/__webpack_require__.n(external_gflow_config_);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n// EXTERNAL MODULE: ./node_modules/lodash/identity.js\nvar identity = __webpack_require__(\"./node_modules/lodash/identity.js\");\nvar identity_default = /*#__PURE__*/__webpack_require__.n(identity);\n// EXTERNAL MODULE: ./node_modules/lodash/pickBy.js\nvar pickBy = __webpack_require__(\"./node_modules/lodash/pickBy.js\");\nvar pickBy_default = /*#__PURE__*/__webpack_require__.n(pickBy);\n// EXTERNAL MODULE: ./node_modules/lodash/template.js\nvar template = __webpack_require__(\"./node_modules/lodash/template.js\");\nvar template_default = /*#__PURE__*/__webpack_require__.n(template);\n;// CONCATENATED MODULE: ./src/js/common/config/request.js\n\n\nvar _config$example, _config$example$api, _config$example2, _config$example2$api;\n\n\n\n/**\n * Get your endpoints safely here first with optional chaining\n */\nvar endpoints = {\n  example: {\n    path: (external_gflow_config_default()) === null || (external_gflow_config_default()) === void 0 ? void 0 : (_config$example = (external_gflow_config_default()).example) === null || _config$example === void 0 ? void 0 : (_config$example$api = _config$example.api) === null || _config$example$api === void 0 ? void 0 : _config$example$api.base_path,\n    nonce: (external_gflow_config_default()) === null || (external_gflow_config_default()) === void 0 ? void 0 : (_config$example2 = (external_gflow_config_default()).example) === null || _config$example2 === void 0 ? void 0 : (_config$example2$api = _config$example2.api) === null || _config$example2$api === void 0 ? void 0 : _config$example2$api.nonce\n  }\n};\n/**\n * Now map them to action names and add templates as needed\n */\n\nvar PATH_MAP = {\n  example: {\n    // Add product to a project\n    // example:\n    // request('example', { method: 'POST', restParams: { project_id: int }, json: { space: int, items: [{ post_id: int, configuration: '', quantity: int }] }}).then(data => console.log(data))\n    // Accepted properties in the JSON body are\n    // space (the (optional) ID of the selected space within the project) and\n    // items, an array of example items.\n    endpoint: template_default()(\"\".concat(endpoints.example.path, \"/<%= project_id %>/items\")),\n    nonce: endpoints.example.nonce\n  }\n};\n// EXTERNAL MODULE: ./node_modules/ramda/es/omit.js\nvar omit = __webpack_require__(\"./node_modules/ramda/es/omit.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/is.js\nvar is = __webpack_require__(\"./node_modules/ramda/es/is.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/isEmpty.js + 3 modules\nvar isEmpty = __webpack_require__(\"./node_modules/ramda/es/isEmpty.js\");\n// EXTERNAL MODULE: ./node_modules/ramda/es/startsWith.js + 9 modules\nvar startsWith = __webpack_require__(\"./node_modules/ramda/es/startsWith.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n;// CONCATENATED MODULE: ./src/js/utils/data/object-to-form-data.js\n\n\nvar objectToFormData = function objectToFormData(obj, rootName, ignoreList) {\n  var formData = new window.FormData();\n\n  function appendFormData(data, root) {\n    if (!ignore(root)) {\n      root = root || '';\n\n      if (data instanceof window.File) {\n        formData.append(root, data);\n      } else if (Array.isArray(data)) {\n        for (var i = 0; i < data.length; i++) {\n          appendFormData(data[i], root + '[' + i + ']');\n        }\n      } else if ((0,esm_typeof.default)(data) === 'object' && data) {\n        for (var key in data) {\n          if (data.hasOwnProperty(key)) {\n            if (root === '') {\n              appendFormData(data[key], key);\n            } else {\n              appendFormData(data[key], root + '.' + key);\n            }\n          }\n        }\n      } else if (data !== null && typeof data !== 'undefined') {\n        formData.append(root, data);\n      }\n    }\n  }\n\n  function ignore(root) {\n    return Array.isArray(ignoreList) && ignoreList.some(function (x) {\n      return x === root;\n    });\n  }\n\n  appendFormData(obj, rootName);\n  return formData;\n};\n\n/* harmony default export */ const object_to_form_data = (objectToFormData);\n// EXTERNAL MODULE: ./node_modules/query-string/index.js\nvar query_string = __webpack_require__(\"./node_modules/query-string/index.js\");\n// EXTERNAL MODULE: ./node_modules/underscore.string/stripTags.js\nvar stripTags = __webpack_require__(\"./node_modules/underscore.string/stripTags.js\");\nvar stripTags_default = /*#__PURE__*/__webpack_require__.n(stripTags);\n// EXTERNAL MODULE: ./node_modules/underscore.string/trim.js\nvar trim = __webpack_require__(\"./node_modules/underscore.string/trim.js\");\nvar trim_default = /*#__PURE__*/__webpack_require__.n(trim);\n// EXTERNAL MODULE: ./node_modules/underscore.string/unescapeHTML.js\nvar unescapeHTML = __webpack_require__(\"./node_modules/underscore.string/unescapeHTML.js\");\nvar unescapeHTML_default = /*#__PURE__*/__webpack_require__.n(unescapeHTML);\n;// CONCATENATED MODULE: ./src/js/utils/request.js\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,defineProperty.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n/**\n * The request module abstracts away most of the pain of dealing with raw fetch.\n * Basic principles:\n * When a base_path needs variables in it, use the template function as seen below and pass those as \"restParams\" in your options\n * When you need query args appended for a get, pass them as \"params\" in your options object\n * When you want to POST set method: 'POST' and if passing json body set json: { data } in your options\n */\n// reasonably generic post (or get)\n// pathKey must be one of PATH_MAP\n// if pathKey references a template function,\n// then options should have a restParams key, which functions as a dictionary for the url template\n// can also have a params key, which is a dict of queryParams\n// you can also add other valid fetch options, to options (such as method and body)\nfunction request(pathKey) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var defaultOptions = _objectSpread({\n    method: 'GET'\n  }, options);\n\n  var newOptions = (0,omit.default)(['body'], defaultOptions);\n\n  if (!pathKey || !PATH_MAP[pathKey]) {\n    throw new Error(\"Unknown pathKey: \".concat(pathKey));\n  }\n\n  var host = newOptions.baseUrl || (external_gflow_config_default()).site_url;\n  var path = PATH_MAP[pathKey].endpoint;\n\n  if ((0,is.default)(Function, path)) {\n    path = PATH_MAP[pathKey].endpoint(_objectSpread(_objectSpread({}, options.body), newOptions.restParams));\n  }\n\n  var url = \"\".concat(host).concat(path); // encode as multipart/form-data\n\n  if (newOptions.method !== 'GET' && newOptions.method !== 'HEAD') {\n    var parseBody = options.body ? options.body : {};\n    newOptions.body = object_to_form_data(parseBody);\n  } // todo: the real fix here is to check the content-type and encode as required,\n  // since body is already an associative array\n  // override if POSTing json\n\n\n  if (newOptions.json) {\n    newOptions.body = JSON.stringify(newOptions.json);\n  } // any params destined to become query parameters\n\n\n  var params = newOptions.params || {};\n\n  if (params && !(0,isEmpty.default)(params)) {\n    var filteredParams = pickBy_default()(params, (identity_default()));\n\n    var p = (0,query_string.stringify)(filteredParams, {\n      arrayFormat: 'bracket'\n    });\n    url = \"\".concat(url, \"?\").concat(p);\n  }\n\n  var initialHeaders = PATH_MAP[pathKey].nonce ? {\n    'X-WP-Nonce': PATH_MAP[pathKey].nonce,\n    'Content-Type': 'application/json'\n  } : {};\n  var headers = newOptions.headers ? _objectSpread(_objectSpread({}, initialHeaders), newOptions.headers) : initialHeaders;\n  console.info(\"Fetching url: \".concat(url));\n  console.info('with options', _objectSpread(_objectSpread({}, newOptions), {}, {\n    body: newOptions.body\n  }));\n  console.info('and headers: ', headers);\n  var start = Date.now(); // do the fetch\n\n  return window.fetch(url, _objectSpread(_objectSpread({}, newOptions), {}, {\n    headers: headers\n  })).then(function (response) {\n    if (response.ok) {\n      return response.text().then(function (text) {\n        try {\n          var data = JSON.parse(text);\n          var time = Date.now() - start;\n          console.info(\"Data for \".concat(pathKey, \" in \").concat(time, \"ms:\"), data);\n          return {\n            data: data,\n            status: response.status,\n            totalPages: response.headers.get('x-wp-totalpages'),\n            totalPosts: response.headers.get('x-wp-total')\n          };\n        } catch (error) {\n          var message = trim_default()(stripTags_default()(unescapeHTML_default()(text)));\n          var err = new Error(\"Invalid server response. \".concat(message));\n          err.detail = {\n            url: url,\n            data: message,\n            status: response.status,\n            error: error\n          };\n          throw err;\n        }\n      });\n    } // we get 40x's and 500's with valid json\n    // we also seem to get errors with application/json which are actually html/text? (see #92408)\n    // ie expected errors - need to make sure these get handled!!\n\n\n    if ((0,startsWith.default)(response.headers.get('Content-Type'), 'application/json')) {\n      return response.text().then(function (text) {\n        try {\n          var data = JSON.parse(text);\n          console.info(\"Data for \".concat(pathKey, \":\"), data);\n          return {\n            data: data,\n            status: response.status\n          };\n        } catch (error) {\n          var message = trim_default()(stripTags_default()(unescapeHTML_default()(text)));\n          var err = new Error(\"Invalid server response. \".concat(message));\n          err.detail = {\n            url: url,\n            data: message,\n            status: response.status,\n            error: error\n          };\n          throw err;\n        }\n      });\n    } // error\n\n\n    return response.text().then(function (data) {\n      var message = trim_default()(stripTags_default()(unescapeHTML_default()(data)));\n      var err = new Error(\"Unknown server response. \".concat(message));\n      err.detail = {\n        url: url,\n        data: message,\n        status: response.status\n      };\n      throw err;\n    });\n  })[\"catch\"](function (error) {\n    console.info(JSON.stringify(error));\n    console.info(error.detail);\n    return {\n      error: error\n    };\n  });\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(\"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n;// CONCATENATED MODULE: ./src/js/templates/components/flyout.js\n/**\n * @function settingToggle\n * @description The gear icon for an ag grid instance that will trigger the settings flyout\n */\nvar flyoutContainer = function flyoutContainer() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var closeButtonClasses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var direction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var position = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  var title = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n  var wrapperClasses = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : '';\n  return \"\\n\\t<article id=\\\"\".concat(id, \"\\\" class=\\\"\").concat(wrapperClasses, \" gform-flyout--\").concat(direction, \" gform-flyout--\").concat(position, \"\\\">\\n\\t\\t<button \\n\\t\\t\\tclass=\\\"\").concat(closeButtonClasses, \" gform-button gform-button--secondary gform-button--circular gform-button--size-xs\\\"\\n\\t\\t\\tdata-js=\\\"gform-flyout-close\\\" \\n\\t\\t\\ttitle=\\\"Close this flyout\\\"\\n\\t\\t>\\n\\t\\t\\t<i class=\\\"gform-button__icon gflow-icon gflow-icon--delete\\\"></i>\\n\\t\\t</button>\\n\\t\\t\").concat(title || description ? '<header class=\"gform-flyout__head\">' : '', \"\\n\\t\\t\").concat(title ? \"<div class=\\\"gform-flyout__title\\\">\".concat(title, \"</div>\") : '', \"\\n\\t\\t\").concat(description ? \"<div class=\\\"gform-flyout__desc\\\">\".concat(description, \"</div>\") : '', \"\\n\\t\\t\").concat(title || description ? '</header>' : '', \"\\n\\t\\t<div class=\\\"gform-flyout__body\\\">\").concat(content, \"</div>\\n\\t</article>\\n\\t\");\n}; // todo: needs i18n\n// EXTERNAL MODULE: ./src/js/utils/tools.js\nvar tools = __webpack_require__(\"./src/js/utils/tools.js\");\n;// CONCATENATED MODULE: ./src/js/utils/a11y/focus-loop.js\n\n/**\n * @function focusLoop\n * @description Loop through focusable els inside a container. Bound to a keydown listener usually.\n *\n * @param {KeyboardEvent} e\n * @param {HTMLElement} trigger\n * @param {HTMLElement} container\n * @param {Function} onEscape\n */\n\nfunction focusLoop() {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var onEscape = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n  if (!container || !trigger) {\n    console.error('You need to pass a container and trigger node to focusLoop.');\n    return;\n  } // esc key, refocus the settings trigger in the editor preview for the active field\n\n\n  if (e.keyCode === 27) {\n    trigger.focus();\n    onEscape();\n    return;\n  } // not tab key, exit\n\n\n  if (e.keyCode !== 9) {\n    return;\n  } // get visible focusable items\n\n\n  var focusable = tools.getFocusable(container); // store first and last visible item\n\n  var firstFocusableEl = focusable[0];\n  var lastFocusableEl = focusable[focusable.length - 1]; // shiftkey was involved, we're going backwards, focus last el if we are leaving first\n\n  if (e.shiftKey) {\n    /* shift + tab */\n    if (document.activeElement === firstFocusableEl) {\n      lastFocusableEl.focus();\n      e.preventDefault();\n    } // regular tabbing direction, bring us back to first el at reaching end\n\n  }\n  /* tab */\n  else if (document.activeElement === lastFocusableEl) {\n      firstFocusableEl.focus();\n      e.preventDefault();\n    }\n}\n;// CONCATENATED MODULE: ./src/js/utils/data/unique-id.js\n/**\n * @function uniqueId\n * @description Generate a unique id\n *\n * @param {string} prefix\n * @return {string}\n */\nfunction uniqueId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  return \"\".concat(prefix, \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n;// CONCATENATED MODULE: ./src/js/common/components/flyout.js\n\n\n\n\n\n\n\n\n\nvar Flyout = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options\n   */\n  function Flyout() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    (0,classCallCheck.default)(this, Flyout);\n\n    (0,defineProperty.default)(this, \"closeFlyout\", function () {\n      if (!_this.flyoutElement.classList.contains('anim-in-active')) {\n        return;\n      }\n\n      _this.flyoutElement.classList.remove('anim-in-ready');\n\n      _this.flyoutElement.classList.remove('anim-in-active');\n\n      _this.flyoutElement.classList.add('anim-out-ready');\n\n      window.setTimeout(function () {\n        _this.flyoutElement.classList.add('anim-out-active');\n      }, 25);\n      window.setTimeout(function () {\n        _this.flyoutElement.classList.remove('anim-out-ready');\n\n        _this.flyoutElement.classList.remove('anim-out-active');\n      }, _this.animationDelay);\n      _this.state.open = false;\n\n      _this.onClose();\n    });\n\n    (0,defineProperty.default)(this, \"maybeCloseFlyout\", function (e) {\n      var _e$detail;\n\n      if (((_e$detail = e.detail) === null || _e$detail === void 0 ? void 0 : _e$detail.activeId) === _this.id) {\n        return;\n      }\n\n      _this.flyoutElement.classList.remove('anim-in-ready');\n\n      _this.flyoutElement.classList.remove('anim-in-active');\n\n      _this.flyoutElement.classList.remove('anim-out-ready');\n\n      _this.flyoutElement.classList.remove('anim-out-active');\n\n      _this.state.open = false;\n    });\n\n    (0,defineProperty.default)(this, \"handleKeyEvents\", function (e) {\n      return focusLoop(e, _this.triggerElement, _this.flyoutElement, _this.closeFlyout);\n    });\n\n    (0,defineProperty.default)(this, \"handleTriggerClick\", function (e) {\n      _this.triggerElement = e.target;\n\n      if (_this.state.open) {\n        _this.closeFlyout();\n\n        _this.triggerElement.focus();\n\n        _this.state.open = false;\n      } else {\n        _this.showFlyout();\n\n        _this.closeElement.focus();\n\n        _this.state.open = true;\n      }\n    });\n\n    (0,esm_extends.default)(this, {\n      animationDelay: 215,\n      // total runtime of close animation. must be synced with css\n      closeButtonClasses: 'gform-flyout__close',\n      // classes for the close button\n      content: '',\n      // the html content\n      description: '',\n      // the optional description for the flyout\n      direction: 'right',\n      // direction to fly in from, left or right\n      id: uniqueId('flyout'),\n      // id for the flyout\n      insertPosition: 'beforeend',\n      // insert position relative to target\n      lockBody: false,\n      // whether to lock body scroll when open\n      onClose: function onClose() {},\n      // function to fire when closed\n      onOpen: function onOpen() {},\n      // function to fire when opened\n      position: 'fixed',\n      // fixed or absolute positioning\n      renderOnInit: true,\n      // render on initialization?\n      target: 'body',\n      // the selector to append the flyout to\n      title: '',\n      // the optional title for the flyout\n      triggers: '[data-js=\"gform-trigger-flyout\"]',\n      // the selector[s] of the trigger that shows it\n      wrapperClasses: 'gform-flyout' // additional classes for the wrapper\n\n    }, options);\n\n    this.state = {\n      open: false\n    };\n    this.flyoutElement = null;\n    this.triggerElement = null;\n    this.closeElement = null;\n\n    if (this.renderOnInit) {\n      this.init();\n    }\n  }\n\n  (0,createClass.default)(Flyout, [{\n    key: \"showFlyout\",\n    value: function showFlyout() {\n      var _this2 = this;\n\n      this.onOpen();\n      this.flyoutElement.classList.add('anim-in-ready');\n      window.setTimeout(function () {\n        _this2.flyoutElement.classList.add('anim-in-active');\n      }, 25);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var target = document.querySelectorAll(this.target)[0];\n\n      if (!target) {\n        console.error(\"Flyout could not render as \".concat(this.target, \" could not be found.\"));\n        return;\n      }\n\n      target.insertAdjacentHTML(this.insertPosition, flyoutContainer(this.id, this.closeButtonClasses, this.content, this.description, this.direction, this.position, this.title, this.wrapperClasses));\n      this.flyoutElement = document.getElementById(this.id);\n      this.closeElement = tools.getNodes('gform-flyout-close', false, this.flyoutElement)[0];\n      console.info(\"Gravity Flow Common: Initialized flyout component on \".concat(this.target, \".\"));\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this3 = this;\n\n      this.flyoutElement.addEventListener('keydown', this.handleKeyEvents);\n      this.closeElement.addEventListener('click', this.closeFlyout);\n      tools.getNodes(this.triggers, true, document, true).forEach(function (trigger) {\n        return trigger.addEventListener('click', _this3.handleTriggerClick);\n      });\n      document.addEventListener('gform/close-flyouts', this.maybeCloseFlyout);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.render();\n      this.bindEvents();\n    }\n  }]);\n\n  return Flyout;\n}();\n\n\n;// CONCATENATED MODULE: ./src/js/common/config/constants.js\nvar INBOX_DEFAULT_ID = 'inbox_default';\n;// CONCATENATED MODULE: ./src/js/templates/components/grid.js\n/**\n * @function settingToggle\n * @description The gear icon for an ag grid instance that will trigger the settings flyout\n */\nvar settingToggle = function settingToggle() {\n  var triggerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'grid-settings';\n  var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return \"\\n\\t<button \\n\\t\\tclass=\\\"gflow-grid__button gflow-grid__button--settings gflow-icon gflow-icon--cog\\\" \\n\\t\\tdata-js=\\\"\".concat(triggerId, \"\\\" \\n\\t\\ttitle=\\\"\").concat(title, \"\\\"\\n\\t></button>\\n\\t\");\n};\n;// CONCATENATED MODULE: ./src/js/templates/components/toggle.js\n/**\n * Toggle template\n *\n * @param {string} id\n * @param {string} name\n * @param {boolean} checked\n * @param {string} disabledLabel\n * @param {string} enabledLabel\n * @param {string} wrapperClasses\n * @param {string} jsAttribute\n *\n * @return {string}\n */\n/* harmony default export */ function toggle() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var checked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var disabledLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var enabledLabel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var wrapperClasses = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'gform-field__toggle';\n  var jsAttribute = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'gform-toggle';\n  return \"\\n\\t<div class=\\\"\".concat(wrapperClasses, \"\\\">\\n\\t\\t<span class=\\\"gform-settings-input__container\\\">\\n\\t\\t\\t<input \\n\\t\\t\\t\\ttype=\\\"checkbox\\\" \\n\\t\\t\\t\\tclass=\\\"gform-field__toggle-input\\\" \\n\\t\\t\\t\\tdata-js=\\\"\").concat(jsAttribute, \"\\\" \\n\\t\\t\\t\\t\").concat(id ? \"id=\".concat(id) : '', \"\\n\\t\\t\\t\\t\").concat(name ? \"name=\".concat(name) : '', \"\\n\\t\\t\\t\\t\").concat(checked ? 'checked' : '', \"\\n\\t\\t\\t>\\n\\t\\t\\t<label class=\\\"gform-field__toggle-container\\\" \").concat(id ? \"for=\".concat(id) : '', \">\\n\\t\\t\\t\\t<span \\n\\t\\t\\t\\t\\tclass=\\\"gform-field__toggle-switch-text screen-reader-text\\\"\\n\\t\\t\\t\\t\\tdata-disabled-text=\\\"\").concat(disabledLabel, \"\\\"\\n\\t\\t\\t\\t\\tdata-enabled-text=\\\"\").concat(enabledLabel, \"\\\"\\n\\t\\t\\t\\t>\").concat(checked ? enabledLabel : disabledLabel, \"</span>\\n\\t\\t\\t\\t<span class=\\\"gform-field__toggle-switch\\\"></span>\\n\\t\\t\\t</label>\\n\\t\\t</span>\\n\\t</div>\\n\\t\");\n}\n;// CONCATENATED MODULE: ./src/js/templates/grids/inbox.js\n\n/**\n * @function settings\n * @description The content for the inbox settings flyout\n */\n\nvar settings = function settings() {\n  return \"\\n\\t<span class=\\\"gform-flyout__setting-label\\\">\\n\\t\\tEnable Push Notifications\\n\\t</span>\\n\\t<span class=\\\"gform-flyout__setting-desc\\\">\\n\\t\\tYou will have to allow push notifications for this domain and browser to enable this feature. If you haven't already,\\n\\t\\tyour browser will ask you to enable them one time.\\n\\t</span>\\n\\t\".concat(toggle('inbox-setting-push-notifications', 'inbox-setting-push-notifications', false, 'disabled', 'enabled', 'gform-field__toggle gform-flyout__setting', 'inbox-setting'), \"\\n\\t\");\n};\n;// CONCATENATED MODULE: ./src/js/common/grids/inbox.js\n\n\n\n\n/**\n * Inbox\n *\n * Initializes the inbox component\n */\n\n\n\n\n\n\n\n\nvar el = {};\nvar instances = {\n  grids: {},\n  flyouts: {}\n};\nvar globalOptions = {\n  animateRows: false\n};\nvar data = ((external_gflow_config_default()) === null || (external_gflow_config_default()) === void 0 ? void 0 : (external_gflow_config_default()).grids) || {};\nvar config = (external_gflow_config_default()) || {};\n\nvar initializeGrid = function initializeGrid(grid) {\n  var _data$gridId;\n\n  var gridId = grid.dataset.gridId || INBOX_DEFAULT_ID;\n\n  if (!((_data$gridId = data[gridId]) !== null && _data$gridId !== void 0 && _data$gridId.grid_options)) {\n    console.error(\"Cant find inbox options for grid id: \".concat(gridId));\n  }\n\n  var gridOptions = (0,esm_extends.default)({}, data[gridId].grid_options, globalOptions);\n\n  gridOptions.getRowNodeId = function (row) {\n    return parseInt(row.id);\n  };\n\n  gridOptions.columnDefs.forEach(function (column) {\n    return applyColumnComparator(column);\n  });\n  instances.grids[gridId] = new ag_grid_community_cjs.Grid(grid, gridOptions);\n  var sortCol = (config === null || config === void 0 ? void 0 : config.default_sort_col) || 'none';\n  var sortDir = (config === null || config === void 0 ? void 0 : config.default_sort_dir) || 'asc';\n\n  if (sortCol === 'none') {\n    return;\n  }\n\n  var gridCol = gridOptions.columnApi.getColumn(sortCol);\n\n  if (!gridCol) {\n    return;\n  }\n\n  gridOptions.columnApi.applyColumnState({\n    state: [{\n      colId: sortCol,\n      sort: sortDir\n    }]\n  });\n  initializeSettings(grid, gridId);\n};\n/**\n * @function initializeSettings\n * @description Inject the settings trigger and instantiate the flyout\n */\n\n\nvar initializeSettings = function initializeSettings(grid, gridId) {\n  grid.insertAdjacentHTML('afterbegin', settingToggle('inbox-settings', 'Toggle settings for this table' // todo: needs i18n\n  ));\n  instances.flyouts[gridId] = new Flyout({\n    content: settings(),\n    position: 'absolute',\n    target: '.gflow-inbox.gflow-grid',\n    title: 'Inbox Settings',\n    triggers: '[data-js=\"inbox-settings\"]',\n    wrapperClasses: 'gform-flyout gform-flyout--inbox-settings'\n  });\n};\n\nvar getIdsFromModel = function getIdsFromModel() {\n  var ids = [];\n  data[INBOX_DEFAULT_ID].grid_options.api.forEachNode(function (node) {\n    return ids.push(node.data.id);\n  });\n  return ids;\n};\n\nvar refreshGrid = /*#__PURE__*/function () {\n  var _ref = (0,asyncToGenerator.default)( /*#__PURE__*/regenerator_default().mark(function _callee() {\n    var _window, _window$gflow_config;\n\n    var current_ids, formData, response, responseJson;\n    return regenerator_default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            current_ids = getIdsFromModel();\n            formData = new window.FormData();\n            current_ids.forEach(function (item) {\n              return formData.append('current_ids[]', item);\n            });\n            formData.append('gflow_access_token', ((_window = window) === null || _window === void 0 ? void 0 : (_window$gflow_config = _window.gflow_config) === null || _window$gflow_config === void 0 ? void 0 : _window$gflow_config.current_user_token) || null);\n            console.log(request);\n            _context.next = 7;\n            return window.fetch('/wp-json/gf/v2/refresh_inbox_items', {\n              method: 'post',\n              body: formData\n            });\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.json();\n\n          case 10:\n            responseJson = _context.sent;\n            data[INBOX_DEFAULT_ID].grid_options.api.applyTransaction(responseJson);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function refreshGrid() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @function handleSettingsChange\n * @description Handle changes to the settings for the inbox\n */\n\n\nvar handleSettingsChange = function handleSettingsChange(e) {\n  // switch based on setting name to handle cases, name is also value stored and passed in on init from php in config\n  console.log(e.delegateTarget.name);\n};\n/**\n * @function initializeGrids\n * @description Iterate over all found grids and initialize.\n */\n\n\nvar initializeGrids = function initializeGrids() {\n  el.containers.forEach(function (grid) {\n    return initializeGrid(grid);\n  });\n};\n\nvar bindEvents = function bindEvents() {\n  var refreshButton = document.querySelector('[data-js=\"refresh_inbox\"]');\n  refreshButton.addEventListener('click', function (e) {\n    e.preventDefault();\n    refreshGrid();\n  });\n  delegate_default()(document.body, '[data-js=\"inbox-setting\"]', 'change', handleSettingsChange);\n};\n\nvar init = function init(containers) {\n  el.containers = containers;\n  initializeGrids();\n  bindEvents();\n  console.info('Gravity Flow Common: Initialized inbox components.');\n};\n\n/* harmony default export */ const inbox = (init);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/common/grids/inbox.js\n");

/***/ })

}]);